[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Beginning Physics Lab",
    "section": "",
    "text": "Jupyter Notebook\n\n\nPython is a computer programming language available on all major platforms (Mac, Windows, Linux). Python is a scripting language which means that the computer interprets and runs your code at the moment you run it. In contrast, with a compiled language like C the code must first be converted into binary before it can run (called “compiling” the code). There are pros and cons to both types of languages. The on-the-fly interpretation of Python makes it quick and easy to write code and provides fast results for simple calculations. When codes become longer and more complex, on-the-fly interpretation becomes less efficient and execution time will be much slower than it would be with a compiled language. The pros and cons flip for a compiled language; writing code in a compiled language can be cumbersome and slow, but the execution time is typically much faster. Out of necessity, most programmers become proficient in both types of languages. Python(or another interpreted language) is used to “toy around” with your problem and build familiarity. As the complexity of the code increases the user is then forced to transition to a compiled language to get the needed speed. This is the famous “two language” problem and there is a new programming language designed to eliminate this problem by combining the pros from both into one language. (The name of the language is Julia)\nPython is free, open source software and is maintained by the non-profit Python software foundation. This is great because it means that you will always have free access to the Python language regardless of what organization or university you are affiliated with. You’ll never have to worry about not being able to use your Python code without paying for it. Another benefit of open source languages is that all of the codes developed by other people are available for anyone to inspect, modify, and use. This allows anyone to review another’s code to ensure that it does what they say it does, or to modify it to do something else. One last benefit that comes with an open source language is the community of Python users available to answer questions and provide instruction to the beginner. Answers to most questions about python are readily available on tutorial or forum websites.\n\n\n\nThe first step is to install the software (if you haven’t already). The most convenient way to install Python and also get many of the commonly-used libraries is to use an installer. I recommend Anaconda. When installing the software be sure to choose Python 3 since this is the current version. By default, Anaconda will install a suit of softwares and libraries that are commonly used. If you want to install other Python libraries, open the Anaconda-Navigator (green circle icon) and select the Environment tab on the left. Select Not Installed from the pull-down to see all of the libraries that are available to be installed. To install a library, check the box next to it and click Apply. Anaconda will take care of the rest.\n\nTo Do:\n\nInstall Anaconda\nCheck to see if the library “numpy” is installed. If not, install it.\n\n\n\n\n\nA Jupyter notebook is an electronic document designed to support interactive data processing, analysis, and visualization in an easily shared format. A Jupyter notebook can contain live code, math equations, explanatory text, and the output of codes (numbers, plots, graphics, etc..). To launch a Jupyter notebook, first open Anaconda-Navigator (green circle icon) and click the Launch button under JupyterLab. Jupyter can also be launched from the command line by typing jupyter-lab. The jupyter notebook will launch in your default web browser, but it is not a website. From here you can select an already existing Jupyter notebook, denoted by the orange icons and the .ipynb extension, or create a new notebook by clicking New from the File menu.\n\nTo Do:\n\nAt the top of this page there is a link titled “Jupyter Notebook”. Click on that link to download the Jupyter notebook version of this chapter.\nLaunch JupyterLab as explained above.\nOpen the file that you downloaded in step 1 and continue reading this book in the jupyter notebook.\n\n\n\n\nThere are two types of “cells” in a Jupyter notebook: code cells and text cells (also called Markdown cell). Code cells contain “live” Python code that can be run inside of the notebook with any output appearing directly below it. An example of a code cell is given below:\naccel = 9.8\ndt = 0.5\nvi = 10\nvf = vi + a * dt\nprint(vf)\nMarkdown cells are designed to contain explanatory information about what is happening inside of the code cells. They can contain text, math equations, and images. Markdown cells support markdown, html, and \\(\\mathrm{\\LaTeX}\\) (for generating pretty math equations).\nBoth markdown and code cells can be executed by either selecting Run Selected Cells in the Run menu, by clicking the Play icon at the top of the notebook, or by using the Shift-Return shortcut when your cursor is in the desired cell.\n\n\n\nOften you will want to include math equations as part of your explanation/text. Below is an example of what your math should and should not look like.\n\n\\(|\\vec{v}| = \\sqrt{v_x^2 + v_y^2}\\) (like this)\n\nv = sqrt(vx^2 + vy^2) (not like this)\n\nTo make your math equations look like the first example, you must enclose your math equation in “$$”, one pair at the beginnning of the equation and one pair at the end. Enclosing your expression in double dollar signs will put the expression on its own line. To place the expression in the middle of a sentence (inline) you’ll need to enclose the expression in single dollar signs. To generate the math symbols that often show up in equations, you’ll need to know the correct syntax. A table of commonly used math symbols is given below.\n\n\n\n\n\n\n\n\nMath symbol\nExample\n\\(\\mathrm{\\LaTeX}\\) syntax\n\n\n\n\nSubscript\n\\(v_x\\)\nv_x\n\n\nPowers\n\\(v^2\\)\nv^2\n\n\nPowers with more than one digit\n\\(v^{10}\\)\nv^{10}\n\n\nSquare root\n\\(\\sqrt{a + b}\\)\n\\sqrt{a + b}\n\n\nFractions\n\\(\\frac{a}{b}\\)\n\\frac{a}{b}\n\n\nVectors\n\\(\\vec{x}\\)\n\\vec{x}\n\n\nIntegrals\n\\(\\int x^2 dx\\)\n\\int x^2 dx\n\n\nPartial Derivatives\n\\({\\partial f \\over \\partial x}\\)\n{\\partial f \\over \\partial x}\n\n\nSummations\n\\(\\sum_{i = 1}^{10} x_i^2\\)\n\\sum_{i = 1}^{10} x_i^2\n\n\nInfinity\n\\(\\infty\\)\n\\infty\n\n\n\nYou can include Greek letters in your expressions if you know the corresponding syntax. The table below shows some of the more common Greek letters used in physics.\n\n\n\nGreek Letter\n\\(\\mathrm{\\LaTeX}\\) syntax\n\n\n\n\n\\(\\alpha\\)\n\\alpha\n\n\n\\(\\beta\\)\n\\beta\n\n\n\\(\\gamma\\)\n\\gamma\n\n\n\\(\\Delta\\)\n\\Delta\n\n\n\\(\\epsilon\\)\n\\epsilon\n\n\n\nA more comprehensive list of math symbols available can be found here\n\n\n\nTables are often useful for presenting data. You can make a table in a jupyter notebook using the following syntax\n|t (s)       | v (m/s)     |\n|------------|-------------|\n| 0          | 10          |\n| 1.2        | 22          |\n| 2.3        | 25          |\n| 3.0        | 38          |\n| 5.5        | 56          |\nwhich will generate the following table:\n\n\n\nt (s)\nv (m/s)\n\n\n\n\n0\n10\n\n\n1.2\n22\n\n\n2.3\n25\n\n\n3.0\n38\n\n\n5.5\n56\n\n\n\n\n\n\nNavigating a Jupyter notebook is fairly straightforward but there are a few handy shortcuts/hotkeys that will make navigation quicker and your workflow more efficient. When working in a Jupyter notebook, you are always operating in one of two modes: edit mode or navigate mode. In edit mode you can make modifications to the text or code in a cell and in navigate mode you can add/delete cells and modify the cell type. If you can see a blinking cursor in one of the cells you are in edit mode. Otherwise you are in navigate mode. To exit edit mode, simply press the esc key and you will enter navigate mode. To exit navigate mode, simply press the enter key and you will enter edit mode for the cell you were focused on. (You can also double click on a cell with your mouse to enter edit mode.) The shift + enter key sequence will “execute” a cell and produce the associated output. For text cells, executing just means to render the text in a nicely formatted fashion. “Executing” a code cell will actually execute the code block contained in the cell. You also enter navigate mode every time you execute a cell using the shift + enter key sequence. A summary of these shortcuts is given below:\n\nUp/down arrows - Navigate to different cells in the notebook.\nY - turns a text cell into a code cell.\nM - turns a code cell into a text cell.\nA - inserts a new cell above the current cell.\nB - inserts a new cell below the current cell.\nX - deletes the current cell.\nenter - enters edit mode.\nshift + enter - execute a cell.\nesc - enter navigate mode.\n\n\n\n\n\n\n\nJupyter notebooks in this class will be a nice mix of text cells (explanation) and code cells (examples). You will soon learn that code cells produce no output unless you explicitly tell them to using a print statement (similar to the one you used above). When you encounter a code cell, you should feel free to make modifications and additions to the cell until you fully understand how the code works.\n\n\n\nComments are a way to describe what each section of code does and makes it easier for you and others to understand the code. It may seem clear what each section of code does as you write it, but after a week, month or longer, it is unlikely to be obvious. Paul Wilson of the University of Wisconsin at Madison is quoted as saying, “Your closest collaborator is you six months ago, but you don’t reply to emails.” Comment your code now so that you are not confused later.\nThere are several ways to add comments to your code:\n\nUse # to start a comment. Everything on that line the follows will be ignored.\nFor longer comments that will span several lines, use triple double quotes to begin and end the comment (\"\"\")\n\nThe cell below illustrates these two ways to make comments:\n# Speed of light in a vacuum\nc = 3e8\n\nv = 300 # Speed of sound in air\n\n\"\"\"\nThe variables below are the initial conditions for a cannon\nlaunching a ball at a 30 degree angle with an initial speed of\n50 m/s.  The initial height of the cannon ball is 1000 m\n\"\"\"\nv = 50\ntheta = 30\nh_i = 1000\n\nTo Do:\n\nExecute the code block below and verify that no output is produced.\nAdd print statements that help you see the result of the calculation.\nAdd simple comments next to each line explaining the code.\n\n\na = 2 \nb = 3 \nc = a**b\n\n\n\n\n\nPerform the following actions using the shortcuts above:\n\nAdd a cell below this one.\nTurn the cell into a code cell (observe the distinct appearance of code cells).\nIn the code cell, calculate the Stefan-Boltzmann constant using the equation given in the first column of the table found here. Add a print statement so you can verify that you did it correctly.\nExecute the cell using shift + enter. Observe the output.\nCreate another cell just below the code cell you just created.\nTurn it into a text/markdown cell if it isn’t already.\nUsing \\(\\mathrm{\\LaTeX}\\) syntax, write the equation from the table that you used to peform the calculation.\n“Execute” the cell and observe the new output.\n\nRecreate the first three columns of your top 10 favorite physical constants found here (same table as given in exercise 1). Pick constants that have Greek letters and fun mathematical equations associated with them."
  },
  {
    "objectID": "labs/Lab1-Measurements/L1-Intro_to_Error_Analysis.html",
    "href": "labs/Lab1-Measurements/L1-Intro_to_Error_Analysis.html",
    "title": "Lab 1",
    "section": "",
    "text": "Jupyter Notebook\nName:\n\n\nAfter this lab you should be able to:\n\ntake measurements and assign uncertainties.\n\nuse Python to perform simple calculations and plotting, including error bars.\n\npropagate uncertainties for simple calculations.\n\nknow the difference between (and be able to calculate) uncertainty and fractional uncertainty.\n\n\n\n\n\n\nIn 1826, J.K.F Sturm and J.D. Collandon designed an experiment to calculate the speed of sound in seawater. The two men sat in boats separated by 16 kilometers. A bell was suspended in the lake from Sturm’s boat which could be struck by a hammer that was operated by Sturm at the surface. At the exact moment that the hammer struck the bell it also ignited some gun powder which produced an above-water flash. An underwater ear-trumpet was suspended from Collandon’s boat to receive the sound wave emitted by the bell. By measuring the time difference between the flash and the bell’s tone, the scientists were able to calculate the speed of sound to be \\(1435\\) m/s, which was remarkably close to the modern value of \\(1438\\) m/s.\n\n\n\nIf this experiment had been repeated many times the results would have been slightly different every time. This is because experiments always involve measurements, and measurements always have some variability (or uncertainty) associated with them. For example, to measure the difference in time between the bell and the flash involves the use of a watch and a human to operate that watch. A simple analog watch may be able to measure to the nearest second or maybe half second but no smaller. Typical reaction times for humans varies between \\(0.17\\) s (audio stimulus) and \\(0.25\\) s (visual stimulus). Another important measurement that would surely have some variation is the distance between the boats (reported to be \\(16\\) km). Variations in the water temperature and pressure could also change the true value of the speed of sound and therefore make the time measurements differ. Although there is only one true value for the speed of sound in fresh water (at a given temperature and pressure) multiple measurements of this quantity will never be identical. This is represented in the figure below, which is an example of what multiple measurements of the speed of sound may have looked like for Sturm and Collandon. Each vertical bar gives the number of times that the measured speed of sound occurred at that value.\n\n\n\n\n\nAs with the speed of sound experiment, every scientific experiment performed will have measurements, and those measurements will always have variability (or uncertainty) associated with them. In this lab (and several others) we will get practice taking measurements, assigning uncertainty to those measurements, and correctly reporting the uncertainty of calculations.\n\n\n\nNo matter the branch of science you find yourself in, taking measurements will be at the heart of any experiment you do. Measuring involves the use of a measuring device of some sort, such as a ruler, balance, microphone, voltmeter, or any other sensor. When measuring a physical property of an object, we assume that there is a unique “correct” value for this measurement. The problem is that we can never measure this “correct” value because no instrument is perfectly precise and no experiment is free from variability. We have to make do with the goal of getting as close as we can to the “correct” value.\nThere are several factors that affect your ability to perform experiments with perfect precision:\n\nLimited accuracy of measuring devices.\nCalibration of measuring devices\nChanges in physical conditions of experiment\nSimplification of experiment. (e.g. Neglecting small but not negligible forces)\n\n\n\n\nAll measuring devices fall into one of two categories: analog and digital. Analog devices usually have a set of tick marks and a scale printed on them. Meter sticks, spring scales, calipers, multimeters (comes in both analog and digital) are all examples of analog devices. Digital devices display the measurement on an electronic display. Both types of devices have uncertainty associated with them.\nConsider the example shown in figure below where we use a meter stick to measure the length of a rod. If you look close, you’ll notice that the end of the rod falls between the tick marks on the meter stick. Such will almost always be the case. If you were to look really close, you’d notice that the tick marks themselves have finite width. Therefore, even if the end of the rod landed on a tick mark, you still wouldn’t know which part of the tick mark it was. Every instrument is limited to some degree in this way.\n\n\n\nSo we can never really know the true length of the rod, or the true value of any other measurement. The best we can do is to provide a range of values that we are sure will include the true value. In this example, a range of \\((97.6-97.7)\\) would certainly include the correct value, but this range is probably too broad. On the other hand, choosing a range of \\((97.64-97.66)\\) might be too small so as to not actually include the true value. The correct length is probably \\(97.65\\) with a certainty range of \\((97.62-97.68)\\). Another way to say that is to report\n\\[l = 97.65 \\pm .03 \\mathrm{~~cm}\\]\nIn this case, \\(97.65\\) cm is the measured value and \\(.03\\) cm is the uncertainty associated with it. Uncertainties are always rounded to one significant figure and the measured value is rounded to the same decimal place as the uncertainty. It is critical in experimental science that every measurement is reported with an uncertainty value. The number alone is useless without knowing the possible range of values that it falls within.\n\n\n\nMeasurements made from digital devices will carry uncertainty too. This uncertainty arises because the device must round the measurement so that it fits on the digital readout. Uncertainty arises since you can never know what the next digit would have been. For example, suppose that you measure the mass of an object on a digital scale and it reads \\(10.55\\) kg. The actual value of the measurement could have been as low as \\(10.545\\) kg or as high as \\(10.555\\) kg. Anything in that range would have rounded to \\(10.55\\) kg. Hence, the uncertainty on this measurement is \\(\\pm 0.005\\) kg. This measurement would be reported as \\(10.55 \\pm .005\\) kg. In general, the uncertainty of a digital measurement is half of the value of the last decimal place shown.\n\n\n\nIn science, we use two terms that often can cause confusion, since in everyday language they tend to be synonymous. They are precision and accuracy. Precision is a measure of the uncertainty in a measurement. In other words, high precision means low uncertainty. Accuracy, on the other hand, means a measurement agrees well with an accepted standard. The figure below illustrates the concept of precision vs. accuracy when throwing darts at a dartboard.\nWhen all of your measurements are offset from the true value (blue dots in the figure) we call it a systematic error. An example of a systematic error would be using a measuring tape on a hot day. Because the length of the measuring tape has thermally expanded, any measurements taken will be smaller than they should be. There is no way to detect a systematic error by simply gathering data; you must uncover it based on the experimental circumstances.\n\n\n\nOne way to express precision is as a fractional uncertainty:\n\\[\\begin{align}\n\\mathrm{fractional ~ uncertainty} &=\n\\frac{\\mathrm{uncertainty}}{\\mathrm{measured ~value}}\n\\end{align}\\]\nTractional uncertainty describes how large the uncertainty is compared to the measurement and is therefore a measure of relative uncertainty. High precision is reflected by low fractional uncertainty.\nAccuracy is often expressed as a percentage error. There are slightly different ways of defining and using percentage error, depending on which scientific field you are in. In this course we will define percentage error as\n\\[\\mathrm{\\% ~error}=\\frac{(\\mathrm{measured~ value}) - (\\mathrm{theoretical~value})}{(\\mathrm{theoretical ~ value})}\\]\nThe sign of the percentage error then has meaning: a negative percent error means the measured value is less than the theoretical or accepted value, and a positive percent error means the measured value is larger then the theoretical value. Accuracy is reflected by a low percentage error. More specifically, if the percentage error is smaller than the fractional uncertainty, the result is said to be accurate, meaning that the accepted value of the measurement falls within the uncertainty of the result you have obtained. For example, suppose we measure the acceleration due to gravity, and find the value \\(9.86 \\pm .03\\) m/s\\(^2\\). The fractional uncertainty would be\n\\[\\mathrm{fractional~ uncertainty} = \\frac{0.03}{9.86} = 0.0030 = 0.3 \\%\\]\nwhile the percentage error compared to the accepted value of \\(9.80\\) m/s\\(^2\\) would be\n\\[\\mathrm{\\% ~error} = \\frac{9.86 ~\\mathrm{m}/\\mathrm{s}^{2}-9.80~\n  \\mathrm{m}/\\mathrm{s}^{2}}{9.80~ \\mathrm{m}/\\mathrm{s}^{2}} =\n0.0061 = 0.61\\%\\] Since the percent error is larger than the fractional uncertainty we would claim that our experiment did not successfully confirm the widely accepted value of \\(g\\). On the other hand, suppose our measurement of the acceleration due to gravity resulted in the experimental value of \\(10 \\pm 2\\) m/s\\(^2\\). In this case, we would have a fractional uncertainty of \\(20\\%\\) and a percent error of \\(2.0\\%\\), and we could conclude that the experiment successfully confirmed the value of \\(g\\). Your goal in any measurement should be to obtain both accuracy and precision. Note that neither the fractional uncertainty nor the percent error carries any units.\n\n\n\nAt this point, you may be wondering about all of those numbers in your physics textbook that are given to you without any \\(\\pm\\) value attached to them. In the absence of an explicitly-stated uncertainty, it is generally assumed that the uncertainty is \\(\\pm 5\\) on the digit that is one beyond the least significant digit. For example, if your homework problem states that a car was traveling with speed \\(25\\) m/s, it is implied that the uncertainty on that length is \\(\\pm 0.5\\) m/s. After all, if the true value were anywhere in the range \\((24.5 - 25.5)\\), we would have rounded the final answer to \\(25\\) m/s.\nThe numbers used to communicate the precision of a measurement are called significant figures. The rules for tracking and reporting of significant figures that you learn in physics and chemistry class are a quick and dirty way to keep track of these uncertainties as they are used to perform calculations. They ensure that the implied uncertainty in a calculated value is not wildly incongruent with the uncertainty in the data provided.\nHowever, using significant figures to communicate uncertainty does have it’s drawbacks. For example, let’s say that you measure the length of a rod and determine that lies in the range \\((10.5 - 10.6)\\) cm. In other words, you would report the length of the rod to be \\(10.55 \\pm .05\\) cm. You can’t communicate this uncertainty using significant figures. If you report the length to be \\(10.5\\) cm, you’re implying that the actual value is somewhere in the range of \\((10.45 - 10.55)\\) which isn’t the correct window. If you report the length to be \\(10.55\\) cm, you’re implying that the value is somewhere in the range \\((10.545 - 10.555)\\) cm, which is too narrow. We use significant figures because it’s easy and it communicates an uncertainty that is close, but not perfect.\nThe number of significant figures that a number has is an indication of its fractional uncertainty. For example, if you report your mass to be \\(m = 75\\) kg, you are implying an uncertainty of \\(\\pm .5\\) and thus a fractional uncertainty of \\({.5 \\over 75} = 0.7\\%\\). But if you report your mass to be \\(m = 75.1\\) kg you are implying an uncertainty of \\(\\pm .05\\) and thus a fractional uncertainty of \\({.05 \\over 75} = 0.07\\%\\). Roughly speaking for each significant figure that is gained the fractional uncertainty decreases by an order of magnitude. Below you will find a table with approximate correspondence between fractional uncertainties and significant figures.\n\n\n\nNumber of significant figures\nFractional Uncertainty\n\n\n\n\n1\n\\(10\\%\\) — \\(50\\%\\)\n\n\n2\n\\(1\\%\\) — \\(10\\%\\)\n\n\n3\n\\(0.1\\%\\) — \\(1\\%\\)\n\n\n\n\n\n\nOften it will be valuable to produce a visual representation of your value with its uncertainty. As an example, imagine that you and a friend each performed an experiment to measure the acceleration due to gravity and you’d like to compare your results visually. If the results of the two experiments were\n\\[g = 9.6 \\pm 0.3 ~\\text{m/s}^2\\]\n\\[g = 10.1 \\pm 0.2 ~\\text{m/s}^2\\]\nyou could use Python to plot these two measurements with their uncertainties like this\n\nfrom matplotlib.pyplot import errorbar,show,xticks,plot\n\nx = [2,3]\ny = [9.6,10.1]\ndy = [0.3,0.2]\nerrorbar(x,y,yerr = dy,capsize = 10,marker = \"o\",linewidth = 2,capthick = 2,ls = 'none',xticks = None)\nplot([0,4],[9.8,9.8],ls = 'dashed')\nxticks([],[])\nshow()\n\n\n\n\nIn this case, the measurement whose uncertainty window contains the accepted value could claim a successful experiment, while the other measurement could not.\n\n\n\nOften we will need to use measured values, with their associated uncertainties, to calculate another value. For example, let’s say we measure the dimensions of a square plate to be: \\(l = 10.2 \\pm 0.3\\) cm and \\(w = 18.3 \\pm 5\\) cm. Next, we calculate the area to be:\n\\[A = l\\times w = 10.2 \\times 18.3 = 186.66 ~\\mathrm{cm}^2\\].\nWhat is the uncertainty in the area? In other words, how does the uncertainty in the measurements propagate through the calculation to the uncertainty in the area?\nOne way to answer this question is to simply ask, ““What is the maximum and minimum values of the area?”“. As you probably could have guessed, the maximum possible value for the area is\n\\[A_\\mathrm{max} = 10.5 \\times 18.8 = 197.4 ~\\mathrm{cm}^2\\]\nand the minimum possible value is\n\\[A_\\mathrm{min} = 9.9 \\times 17.8 = 176.22 ~\\mathrm{cm}^2\\] .\nTherefore, the actual value of the area must be somewhere between \\(176.22\\) cm\\(^2\\) and \\(197.4\\) cm\\(^2\\) (a range of \\(20\\) cm\\(^2\\)) and we could report the area as:\n\\[A = 187 \\pm 10 ~\\mathrm{cm}\\]\nThe high-low method is great at illustrating how measurement errors can affect results, but should never be used in a professional setting.\n\n\nUsing algebra, we can develop rules for combining uncertainty when multiplying, dividing, adding, subtracting, or raising variables to whole number powers. These rules will cover many simple situations, but eventually we will need to know how to estimate uncertainty for any function as will be covered in a future lab. For now our goal is to have a method that you can use without calculus.\n\n\n\n\n\n\n\n\nFunction\nCalculation\nUncertainty Formula    \n\n\n\n\nAddition\n\\(z = x + y\\)\n\\(\\delta z^2 = \\delta x^2 + \\delta y^2\\)\n\n\nSubtraction\n\\(z = x - y\\)\n\\(\\delta z^2 = \\delta x^2 + \\delta y^2\\)\n\n\nMultiplication\n\\(z = xy\\)\n\\(({\\delta z\\over z})^2 = ({\\delta x \\over x})^2 + ({\\delta y \\over y})^2\\)\n\n\nDivision\n\\(z = {x\\over y}\\)\n\\(({\\delta z\\over z})^2 = ({\\delta x \\over x})^2 + ({\\delta y \\over y})^2\\)\n\n\nMultiply by Constant\n\\(z = Ax\\)\n\\(\\delta z = A\\delta x\\)\n\n\nPowers\n\\(z = x^n\\)\n\\({\\delta z\\over |z|} = n{\\delta x \\over |x|}\\)\n\n\n\nUsing these rules on the example from above, we would find the following uncertainty in the area of the plate.\n$$\n\\[\\begin{align*}\n{\\delta A\\over A} &= \\sqrt{{\\delta l\\over l}^2 + {\\delta w \\over w}^2}\\\\\n&= \\delta A = A \\sqrt{({\\delta l\\over l})^2 + ({\\delta w \\over w})^2}\\\\\n&= (10.2 ~\\text{cm})(18.3 ~\\text{cm}) \\sqrt{{(0.3 ~\\text{cm})\\over (10.2 ~\\text{cm})}^2 + {(0.5 ~\\text{cm}) \\over (18.3 ~\\text{cm})}^2}\\\\\n&= 7.5 ~\\text{cm}^2\\\\\n&= 8 ~\\text{(rounded to 1 sig fig)}\n\\end{align*}\\]\n$$\nAnd the final result would be reported as \\(187 \\pm 8\\) cm\\(^2\\).\nThese uncertainty formulas can be used for more complex calculations by applying multiple formulas to different parts of the expression. For example, suppose you wanted to perform the following calculation with its associated uncertainty:\n\\[ f = b + a x^2\\]\nwhere\n\\[b = 5.1 \\pm 0.2\\]\n\\[a = 1.8 \\pm 0.1\\]\n\\[x = 3.92 \\pm 0.05\\]\nWe can first apply the rule for addition from the table:\n\\[\\delta f^2 = \\delta b^2 + \\delta(ax^2)^2\\]\nand then use the rule for powers to calculate \\(\\delta(ax^2)\\):\n\\[\\delta(ax^2) = a \\delta(x^2) = 2 |x|a \\delta x\\]\nand then insert the second expression into the first to get an expression for the uncertainty on \\(\\delta f\\):\n\\[\\delta f^2 = \\delta b^2 + (2 |x|a \\delta x)^2\\]\nHere is how we could make python perform the calculation.\n\nfrom numpy import sqrt\nb = 5.1\ndb = 0.2\na = 1.8\nda = 0.1\nx = 3.92\ndx = 0.05\nf = b + a * x**2\ndf = sqrt(db**2+ (2 * x * a * dx)**2)\nprint(f\"f = {f:5.1f} +- {df:0.1f}\")\n\nf =  32.8 +- 0.7\n\n\n\n\n\n\n\n\n\n\nMetal block and cylinder\nBalance scale.\nCaliper or ruler.\n\n\n\n\nYou will be given a metal block and a metal cylinder. Both objects are made of the same material. You will be allowed to measure the dimensions and mass of the cylinder but only the dimensions of the block. Your goal is to accurately predict the mass of the block with its associated uncertainty. If the true mass of the block falls within your uncertainty window, the experiment is a success.\nImportant: You cannot directly measure the mass of the block. The instructor will take this measurement.\n\n\n\nCarefully follow the steps below to accomplish your task\n\n\n\nUsing the caliper, measure the dimensions of the metal cylinder. Enter the values and the uncertainties into the code cell provided below.\n(5 pts) Assign uncertainties to the measurements made in step one and record those uncertainties in the code cell provided below.\nUsing the mechanical balance, measure the mass of the cylinder.\n(5 pts) Assign an uncertainty to the mass measurment and record it in the code cell given below.\nCalculate the volume of the cylinder (in units of cm\\(^3\\)) in the code cell below.\n\n(5 pts) Calculate the uncertainty in the volume of the cylinder.\n(5 pts) Calculate the density of the cylinder in units of g/cm\\(^3\\). Note: \\(\\rho = {m \\over V}\\)\n(5 pts) Calculate the uncertainty in the density of the cylinder.\n\n\n\n\n\nUsing the caliper, measure the dimensions of the metal block. Enter the values in the code cell below.\nAssign uncertainties to the measurements you made and record them in the code cell below.\nCalculate the volume of the block (in units of cm\\(^3\\)) in the code cell below.\nCalculate the uncertainty in the volume of the block.\n\n\n\n\n\nCalculate the mass of the block using \\(\\rho = {m \\over V}\\) in units of g/cm\\(^3\\).\nCalculate the uncertainty in the mass of the block.\nCalculate the fractional uncertainty in the mass of the block.\n\n\n\n\n\nHave the teacher or a TA measure the mass of the block to compare against your calculation. Assign the uncertainty in this measurement to be the same as when you measured the mass of the cylinder.\nCalculate the percentage error for your prediction.\nModify the table below to include your results for this experiment.\n\nConclusion: Does your calculation agree with the true value to within the stated uncertainty?\n\n\n\n\n\n\n\n\nQuantity\nValue\n\n\n\n\nDensity of Cylinder (with uncertainty):\n__ +- __\n\n\nPredicted mass of block (with uncertainty):\n__ +- __\n\n\nActual mass of block (with uncertainty):\n__ +- __\n\n\nPercent Error:\n—\n\n\n\n\nfrom pylab import *\n%matplotlib inline\n\n# Enter values for cylinder diameter, height, and mass. Give estimates of the uncertainties.\nd =              # diameter of cylinder in cm\nun_d =           # uncertainty of cylinder diameter in cm\nh =              # height of cylinder in cm\nun_h =           # uncertainty of cylinder height in cm\nm =              # mass of cylinder in gm\nun_m =           # uncertainty of cylinder mass in gm\n\n# Calculate and print the density and its uncertainty\nV =              # Use equations above to calculate volume of cylinder \nun_V =           # Use equation above to calculate uncertainty in volume\n\nrho =            # Use equation above to calculate density of cylinder\nun_rho =         # Use equation above to calculate uncertainty in density\n\nprint(\"The density of the cylinder is: {0:4.2f} +/- {1:4.2f} g/cm^3\".format(rho,un_rho))\n# Block dimensions\nl =           # length of the block in cm\nun_l =        # uncertainty of the length of the block in cm\nw =           # width of the block in cm\nun_w =        # uncertainty of the width of the block in cm\nh_b =         # height of the block in cm\nun_h_b =      # uncertainty of the height of the block in cm\n\n# Compute volume of block with uncertainty\nV_b =         # Calculate volume of block\nun_V_b =      # Calculate uncertainty in volume (can you figure it out from looking at the equation for the cylinder?)\n\n# Compute predicted mass of block\nm_b =         # Use previously-calculate density to calculate mass of the block\nun_m_b =      #Calculate the uncertainty in the mass\n\nprint(\"The predicted mass of the block is: {0:3.0f} +/- {1:1.0f} g\".format(m_b,un_m_b))\n\n\n\n\n\n\n\nFlexible measuring tape.\nMeter stick.\n\n\n\n\nCalculate the volume of this room with its associated uncertainty. Compare your results with classmates.\n\n\n\n\nUsing the flexible measuring tape, measure the length and width of this room. Using the meter stick, measure the height of this room. Assign uncertainties to all of these measurements. Record your values as variable in the code cell provided below.\nIn the code cell below, calculate the volume of the room.\nCalculate the uncertainty in the volume in the code cell below.\nCalculate the fractional uncertainty in the room as a percentage.\nCompare your results with the other groups in class. Enter their volumes (and yours) along with their uncertainties (and yours) on lines 5 and 6 of the code cell provided.\nLabel your axes and put a title on your plot. To learn how, go to matplotlib.org and click on the “Tutorials” tab. Either the “Usage Guide” or the “Pyplot Tutorial” will show you how to add axes labels and a title.\nIs your answer consistent with those of the other groups? If not, explain why it isn’t. >Response:\n\n# Room dimensions\nlr =           # length of the room in m\nun_lr =        # uncertainty of the length of the room in m\nwr =           # width of the room in m\nun_wr =        # uncertainty of the width of the room in m\nhr =           # height of the room in m\nun_hr =        # uncertainty of the height of the room in m\n\n# Compute volume of the room with uncertainty\nV_r =          # Compute the volume of the room\nun_V_r =       # Compute the uncertainty in the volume.\n\nprint(\"The volume of the room is: {0:4.1f} +/- {1:3.1f} m^3\".format(V_r,un_V_r))\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ngroup_num = [1,2,3,4,5,6]\nvolume = []  # Line 5\nun_volume = []  # Line 6\nax = plt.axes()\nax.errorbar(group_num,volume,yerr = un_volume,fmt = 'go', capsize = 6)\nplt.show()"
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "",
    "text": "Name:"
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#skills",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#skills",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "Skills",
    "text": "Skills\n\nPropagate uncertainty for moderately complex equations.\nUse Python to perform simple calculations, construct summary tables (pandas dataframes), and display plots including error bars.\nLearn the difference between independent and dependent uncertainties and be able to propagate uncertainty for both cases.\nUse graphs to uncover relationships between data."
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#background-information",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#background-information",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "Background Information",
    "text": "Background Information\n\nThe Slope of a Function\nThis week we will be performing derivatives, which is a calculus concept. Since some of you are not familiar with the derivative, I will give some explanation. I assume that all of you are familiar with the simple linear function\n\\[y = m x + b\\]\nand if you were asked what the slope of this function was you would say \\(m\\), the number that multiplies the independent variable \\(x\\). In other words,\n\\[m = {\\Delta y \\over \\Delta x}\\]\nwhere \\(\\Delta y = y_2 -y_1\\) and \\(\\Delta x = x_2 -x_2\\).\nFor example consider the function:\n\\[y(t) = 5 t + 2\\]\nwhich is plotted below.\n\n\n\n\n\nCareful inspection of this graph reveals that indeed the function value (\\(y\\)) does increase by \\(5\\) meters for every \\(1\\) second that elapses. The slope of this function is 5 no matter which two points we choose to use when calculating \\(\\Delta y\\) and \\(\\Delta t\\).\n\\[{dy \\over dt} = {(5 ~\\text{m}) - (0 ~\\text{m})\\over (1 ~\\text{s}) - (0 ~\\text{s})} ={5 ~\\text{m}\\over 1 ~\\text{s}} = 5 ~\\text{meters}/ \\text{second} (\\text{ using (0,0) and (1,5)})\\]\n\\[{dy \\over dt} = {(2.5 ~\\text{m}) - (0 ~\\text{m})\\over (0.5 ~\\text{s}) - (0 ~\\text{s})} ={2.5 ~\\text{m}\\over 0.5 ~\\text{s}} = 5 ~\\text{meters}/ \\text{second}(\\text{ using (0,0) and (0.5,2.5)})\\]\n\\[{dy \\over dt} = {(1 ~\\text{m}) - (0 ~\\text{m})\\over (0.2 ~\\text{s}) - (0 ~\\text{s})} = {1 ~\\text{m}\\over 0.2 ~\\text{s}} = 5 ~\\text{meters}/ \\text{second}(\\text{ using (0,0) and (0.2,1)})\\]\nThis is great, but not all curves are straight lines. In fact, most of the functions that matter will not be straight lines. So let’s look at an example of a curve that isn’t straight.\n\n\n\n\n\nIf asked to calculate the slope of this curve, you might get stuck since the slope varies continuously (i.e the slope is different at every point). Let’s imagine that we’d like to know the slope of this function at \\(t = 0.2\\) s. We can make a first attempt at this by finding the slope of the line that passes through the points at \\(t= 0.2\\) and \\(t = 0.45\\) (top left plot). Improvements to this can be made by slowly bringing these two points closer together. Eventually, the two points become so close together that the resulting line is tangent to the function at \\(t= 0.2\\). The slope of this function at \\(t = 0.2\\) is equal to the tangent line at that point.\n\n\n\n\n\nLet’s visualize the tangent line for several different points on this function.\n\n\n\n\n\n\n\nThe derivative\nWhat we really need is a new function that gives the slope of the original function. This is called a derivative and it is represented like this:\n\\[y(x) = {df(x) \\over dx}\\]\nThe value of the function \\(y(x)\\) gives the slope of the function \\(f(x)\\). For example, if \\(f(x) = x^2\\), then \\(y(x) = {df(x) \\over dx} = 2x\\). Let’s plot both of those functions next to each other to convince ourselves that the value of \\(y(x)\\) is the slope of \\(f(x)\\).\n\n\n\n\n\nTo find the function that gives the slope of another function we can follow a set of mathematical rules. One of the most common rules is the chain rule which applies to polynomial functions. Specifically, if \\(f(x) = a + bx + cx^2 + dx^2 + \\dots = \\sum_n a_n x^n\\), then\n\\[ y(x) = f'(x) = a_n (n - 1) x^{n-1}\\]\nThe derivative of other common functions is given in the table below. Your calculus class will teach you how to find the derivative of more complicated functions than those found in the table.\n\n\n\nFunction (\\(f(x)\\))\nDerivative (\\(y(x) = f'(x)\\))\n\n\n\n\n\\(f(x) = \\sin(a x)\\)\n\\(y(x) = a \\cos(a x)\\)\n\n\n\\(f(x) = \\cos(a x)\\)\n\\(y(x) = -a \\sin(a x)\\)\n\n\n\\(f(x) = \\tan(a x)\\)\n\\(y(x) = a \\sec(a x)^2\\)\n\n\n\\(f(x) = e^{a x}\\)\n\\(y(x) = ae^{a x}\\)\n\n\n\\(f(x) = \\ln(a x)\\)\n\\(y(x) = {a \\over x}\\)\n\n\n\\(f(x) = {a \\over x}\\)\n\\(y(x) = -{a \\over x^2}\\)\n\n\n\n\n\nUsing the derivative to find uncertainty.\nSo how does the derivative help us calculate uncertainty. Let’s consider an example where we measure the frequency (\\(f\\)) of a certain light beam to be \\(f = 4.2 \\pm 0.5 \\times 10^{15}\\) Hz and want to calculate the wavelength \\(\\lambda\\) (with its associated uncertainty).\n\\[ \\lambda = {3 \\times 10^8 \\over f}\\]\nA plot of this function is given below\n\n\n\nIf \\({df \\over dx}\\) is the slope of the tangent line (\\({\\Delta f \\over \\Delta x}\\)), then multiplying this slope by \\(\\Delta x\\) will give the change in function value over this distance. In the context of uncertainty, \\({df \\over dx}\\) is the derivative of the calculated value and multiplying this by the uncertainty in \\(x\\) (\\(\\delta x\\)) produces the uncertainty in the calculated value.\n\\[\n\\delta f = {df \\over dx} \\delta x\n\\]\nThis equation can be extended to functions of more than one variable by adding the square of each contribution:\n\\[(\\delta f)^2 = ({\\partial f\\over \\partial x} \\delta x)^2 + ({\\partial f\\over \\partial y}\\delta y)^2  + \\dots\\]\nThis is the most important formula for uncertainty propagation and the one we will use going forward.\n\n\nAn Example\nImagine measuring the dimensions and mass of a block with their associated uncertainties:\n\\[l = 5.2 \\pm 0.1 ~\\text{cm}\\]\n\\[w = 8.4 \\pm 0.3 ~\\text{cm}\\]\n\\[h = 10.8 \\pm 0.4 ~\\text{cm}\\]\n\\[m = 345 \\pm 5 ~\\text{grams}\\]\nand proceeding to calculate the density of the block\n\\[\\rho = {m \\over V} = {m \\over l \\times w \\times h}\\]\n\n\n=  0.73 g/cm^3\n\n\nTo calculate the uncertainty, we must first take four derivatives with respect to \\(l\\), \\(w\\), \\(h\\), and \\(m\\):\n\\[ {\\partial \\rho \\over l} = -{m \\over l^2 w h}\\]\n\\[ {\\partial \\rho \\over h} = -{m \\over l w h^2}\\]\n\\[ {\\partial \\rho \\over w} = -{m \\over l w^2 h}\\]\n\\[ {\\partial \\rho \\over m} = {1 \\over l w h}\\]\nNow we can calculate the uncertainty as\n\\[\\delta \\rho = \\sqrt{({\\partial \\rho \\over \\partial l} \\delta l)^2 + ({\\partial \\rho \\over \\partial w} \\delta w)^2 + ({\\partial \\rho \\over \\partial h} \\delta h)^2 + ({\\partial \\rho \\over \\partial m} \\delta m)^2}\\]\n\\[ = \\sqrt{(-{m \\over l^2 w h} \\delta l)^2 + (-{m \\over l w^2 h} \\delta w)^2 + (-{m \\over l w h^2} \\delta h)^2 + ({1 \\over l w h} \\delta m)^2}\\]\n\\[ = \\sqrt{(-{(345 ~\\text{grams}) \\over (5.42 ~\\text{cm})^2 (8.4 ~\\text{cm}) (10.8 ~\\text{cm})} (0.1 ~\\text{cm}))^2 + (-{(345 ~\\text{grams}) \\over (5.42 ~\\text{cm}) (8.4 ~\\text{cm})^2 (10.8 ~\\text{cm})} (0.3 ~\\text{cm}))^2 + (-{(345 ~\\text{grams}) \\over (5.42 ~\\text{cm}) (8.4 ~\\text{cm}) (10.8 ~\\text{cm})^2} (0.4 ~\\text{cm}))^2 + ({1 \\over (5.42 ~\\text{cm}) (8.4 ~\\text{cm}) (10.8 ~\\text{cm})} (5 ~\\text{grams}))^2}\\]\nIn the code cell below we use python to calculate this uncertainty.\n\nfrom numpy import sqrt\nm = 345\ndm = 5\nl = 5.2\ndl = 0.1\nw = 8.4\ndw = 0.3\nh = 10.8\ndh = 0.4 \n\nrho = m/l/w/h\ndrdl = -m/l**2/w/h\ndrdw = -m/l/w**2/h\ndrdh = -m/l/w/h**2\ndrdm = 1/l/w/h\ndrho = sqrt((drdl * dl)**2 + (drdw * dw)**2 + (drdh * dh)**2 + (drdm * dm)**2)\nprint(f\"The density of the block is {rho:5.2f} +- {drho:4.2f} g/cm^3\")\n\nThe density of the block is  0.73 +- 0.04 g/cm^3"
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#activity-i-the-pendulum-50-pts",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#activity-i-the-pendulum-50-pts",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "Activity I: The pendulum (50 pts)",
    "text": "Activity I: The pendulum (50 pts)\n\nEquipment needed:\n\nPendulum. (We have some pre-made, or you can tie a string to a mass)\nMetal support stand for pendulum to swing from.\nPhotogate.\n\n\n\nGoal:\nBy taking measurements on a simple pendulum, calculate the acceleration due to gravity with its associated uncertainty. Compare to the known value for Rexburg.\n\n\nProcedure:\n\nAssemble five pendulums of different lengths, with the lengths ranging from \\(0.25\\) m to \\(2.0\\) m.\n\nFor each pendulum, perform the following:\n\nMeasure the distance from the support point to the center of the pendulum. This is the length of the pendulum \\(L\\). Assign an uncertainty to this measurement and record the length with its associated uncertainty in the code cell provided below.\nRelease the pendulum from a small initial angle (no bigger than \\(15^\\circ\\) from the vertical) and use the photogate to measure the period \\(T\\) of the pendulum with its associated uncertainty. (The period of a pendulum is the time it take to make one full cycle.)\nCalculate the acceleration due to gravity (\\(g\\)) using \\(g = {4 \\pi^2 L \\over T^2}\\).\nUsing the methods discussed above determine the equation for calculating the uncertainty in \\(g\\). Insert it into the math equation below \\[ \\delta g = \\]\nCalculate the uncertainty and fractional uncertainty in \\(g\\) in the code cell below.\n\nIn lines 4,5, and 6 of the cell below record all of your length, period, and g values for the five pendulums.\nIn lines 7,8, and 9 record all of the uncertainties for the five pendulums.\nWhen you execute the cell, you will see a table summarizing your results and two plots to help analyze your results. Analyze the results to answer the following questions:\n\nWhich result has the lowest uncertainty? Can you explain why?\nWhat function do you think best represents the relationship between \\(L\\) and \\(T\\)?(We will study curve-fitting in a later lab.)\nThe accepted value of \\(g\\) for Rexburg is \\(g = 9.80056\\) m/s\\(^2\\). Do your calculations agree with this value to within your calculated uncertainties? > Response:\n\n\n# Pendulum Parameters\nT =           # period of the pendulum\nun_T =        # uncertainty of the period of the pendulum\nL =           # length of the pendulum\nun_L =        # uncertainty of the length of the pendulum\n\n# Compute volume of the room with uncertainty\ng =          # Compute a value for g\nun_g =       # Compute the uncertainty in g.\nfrac_g =     # Fractional uncertainty in g\n\nprint(\"The acceleration due to gravity is: {0:4.1f} +/- {1:3.1f} m/s^2. That's a fractional uncertainty of {2:6.2f}%.\".format(g,un_g, 100 * frac_g))\nimport matplotlib.pyplot as plt\nfrom pandas import DataFrame\nimport numpy as np\n%matplotlib inline\n\nperiods = [,,,,] # Line 4\nlengths = [,,,,]  # Line 5\ngvalues = [,,,,]  # Line 6\nun_length = [,,,,]  # Line 7\nun_period = [,,,,]  # Line 8\nun_g = [,,,,]  # Line 9\n\ndf = DataFrame(np.transpose([periods,un_period,lengths,un_length,gvalues,un_g]),columns = [\"T (s)\",\"δT (s)\",\"L (m)\",\"δL (m) \",\"g (m/s^2)\",\"δg (m/s^2)\"],index = list(range(1,4)))\ndisplay(df)\n\nfig = plt.figure()            \nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nax1.errorbar(lengths,periods,yerr = un_period,xerr = un_length,fmt = 'go', capsize = 6)\nax1.set_aspect(1)\nax1.set_xlabel(\"L (meters)\")\nax1.set_ylabel(\"T (seconds)\")\nax1.set_title(\"Period vs Length for five pendulums\")\n\nax2.errorbar(lengths,gvalues,yerr = un_g,fmt = 'ro', capsize = 6)\nax2.set_aspect(1)\nax2.set_xlabel(\"L (meters)\")\nax2.set_ylabel(\"g (m/s^2)\")\nax2.set_title(\"g vs Length for five pendulums\")\n\n\nplt.show()"
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#activity-ii-50-points",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#activity-ii-50-points",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "Activity II (50 points)",
    "text": "Activity II (50 points)\n\nEquipment needed\n\nMeter Stick\nStopwatch (the one on your phone will do fine.)\nTennis ball.\n\n\n\nGoal\nBy measuring the fall time for an object in free fall, calculate the acceleration due to gravity here in Rexburg.\n\n\nProcedure\n\nFind a location in the building that will allow the greatest drop distance for the tennis ball. (the front foyer is a good choice.) Measure the distance from the release point to the ground with its associated uncertainty. Record your values in the code cell provided below.\nUsing a stopwatch, measure the fall time with its associated uncertainty. Record the values in the code cell provided below.\nUsing the equation below, calculate the acceleration due to gravity. \\[ g = {2 h \\over t^2}\\]\nUsing the methods discussed above determine the equation for calculating the uncertainty in \\(g\\). Insert it into the math equation below \\[ \\delta g = \\]\nUsing the equation from step 4, calculate the uncertainty in \\(g\\) in the code cell below.\nRepeat steps 1 - 5 ten more times to obtain ten values of \\(g\\) and \\(\\delta g\\).\nPut all of your data in the code cell provided below (the second code cell) and execute the cell to reveal a summary table and plots that summarize your results.\n\nUsing your results, answer the following questions:\n\nAre your ten g values consistent with one another to within their stated uncertainties. Explain.\nWhat function do you think describes the relationship between the fall distance and the fall time. (We will study curve-fitting in a later lab.)\nWhich of your g values agree with the accepted value of g for Rexburg given in the first exercise.\n\n\nResponse:\n\nTake a minute to inspect all of the code that I have given to you today. Ask questions about code that you don’t understand. As some point, you’ll have to recreate code like this on your own.\n\nt =            # Time in air in sec\nun_t =         # Uncertainty of time measurement in sec\nh =            # Height in meters\nun_h =         # Uncertainty of height in meters\ng =            # Calculate g using equation above\nun_g =         # Calculate uncertainty in g\nfrac_g =       # Fractional uncertainty in g\n\nprint(\"g : {0:4.2f} +/- {1:4.2f} m/s^2.  That's a fractional uncertainty of {2:6.2f}%.\".format(g,un_g,frac_g))\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pandas import DataFrame\n%matplotlib inline\n\ntrial = [1,2,3,4,5,6,7,8,9,10]\nfallDistances = [,,,,,,,,,]\nun_distance = [,,,,,,,,,]\nfallTimes = [,,,,,,,,,]\nun_time = [,,,,,,,,,]\ng = [,,,,,,,,,]  \nun_g = [,,,,,,,,,]  \n\ndf = DataFrame(np.transpose([fallDistances,un_distance,fallTimes,un_times,gvalues,un_g]),columns = [\"Fall Distance (m)\",\"δd (m)\",\"Fall Times (s)\",\"δt (s) \",\"g (m/s^2)\",\"δg (m/s^2)\"],index = list(range(1,4)))\ndisplay(df)\n\n\nfig = plt.figure()            \nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\n\n\nax1.errorbar(trial,g,yerr = un_g,fmt = 'go', capsize = 6)\nax1.set_aspect(1)\nax1.set_xlabel(\"trial\")\nax1.set_ylabel(\"g (m/s^2)\")\nax1.set_title(\"Acceleration due to gravity for 10 experiments\")\n\n\nax2.errorbar(fallTimes,fallDistances,yerr = un_distance,xerr=un_time,fmt = 'ro', capsize = 6)\nax2.set_aspect(1)\nax2.set_xlabel(\"Fall Times (sec)\")\nax2.set_ylabel(\"Fall Distance (m)\")\nax2.set_title(\"Fall Distance vs. Fall Time.\")\n\n\n\nplt.show()\nfrom numpy import array\nfrom statistics import mean, stdev\nh =        # Height in meters\nt_10 = array([ , , , , , , , , , ],float)    # Enter your ten time measurements\ng =       # Calculate g for all time measurements\ng_avg = mean(g)     # calculate mean\ng_stdev = stdev(g)  # calculate standard deviation\nprint(\"The average value for g is: {0:4.1f}  m/s^2\".format(g_avg))\nprint(\"The standard deviation for the g values is: {0:4.2f}  m/s^2\".format(g_stdev))\n\nGiven a choice, would you prefer to report your value of g and its uncertainty from part (a), or your value just calculated? Give a reason for your answer.\n\n\nResponse:"
  }
]