[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Beginning Physics Lab",
    "section": "",
    "text": "Jupyter Notebook\n\n\nPython is a computer programming language available on all major platforms (Mac, Windows, Linux). Python is a scripting language which means that the computer interprets and runs your code at the moment you run it. In contrast, with a compiled language like C the code must first be converted into binary before it can run (called “compiling” the code). There are pros and cons to both types of languages. The on-the-fly interpretation of Python makes it quick and easy to write code and provides fast results for simple calculations. When codes become longer and more complex, on-the-fly interpretation becomes less efficient and execution time will be much slower than it would be with a compiled language. The pros and cons flip for a compiled language; writing code in a compiled language can be cumbersome and slow, but the execution time is typically much faster. Out of necessity, most programmers become proficient in both types of languages. Python(or another interpreted language) is used to “toy around” with your problem and build familiarity. As the complexity of the code increases the user is then forced to transition to a compiled language to get the needed speed. This is the famous “two language” problem and there is a new programming language designed to eliminate this problem by combining the pros from both into one language. (The name of the language is Julia)\nPython is free, open source software and is maintained by the non-profit Python software foundation. This is great because it means that you will always have free access to the Python language regardless of what organization or university you are affiliated with. You’ll never have to worry about not being able to use your Python code without paying for it. Another benefit of open source languages is that all of the codes developed by other people are available for anyone to inspect, modify, and use. This allows anyone to review another’s code to ensure that it does what they say it does, or to modify it to do something else. One last benefit that comes with an open source language is the community of Python users available to answer questions and provide instruction to the beginner. Answers to most questions about python are readily available on tutorial or forum websites.\n\n\n\nThe first step is to install the software (if you haven’t already). The most convenient way to install Python and also get many of the commonly-used libraries is to use an installer. I recommend Anaconda. When installing the software be sure to choose Python 3 since this is the current version. By default, Anaconda will install a suit of softwares and libraries that are commonly used. If you want to install other Python libraries, open the Anaconda-Navigator (green circle icon) and select the Environment tab on the left. Select Not Installed from the pull-down to see all of the libraries that are available to be installed. To install a library, check the box next to it and click Apply. Anaconda will take care of the rest.\n\nTo Do:\n\nInstall Anaconda\nCheck to see if the library “numpy” is installed. If not, install it.\n\n\n\n\n\nA Jupyter notebook is an electronic document designed to support interactive data processing, analysis, and visualization in an easily shared format. A Jupyter notebook can contain live code, math equations, explanatory text, and the output of codes (numbers, plots, graphics, etc..). To launch a Jupyter notebook, first open Anaconda-Navigator (green circle icon) and click the Launch button under JupyterLab. Jupyter can also be launched from the command line by typing jupyter-lab. The jupyter notebook will launch in your default web browser, but it is not a website. From here you can select an already existing Jupyter notebook, denoted by the orange icons and the .ipynb extension, or create a new notebook by clicking New from the File menu.\n\nTo Do:\n\nAt the top of this page there is a link titled “Jupyter Notebook”. Click on that link to download the Jupyter notebook version of this chapter.\nLaunch JupyterLab as explained above.\nOpen the file that you downloaded in step 1 and continue reading this book in the jupyter notebook.\n\n\n\n\nThere are two types of “cells” in a Jupyter notebook: code cells and text cells (also called Markdown cell). Code cells contain “live” Python code that can be run inside of the notebook with any output appearing directly below it. An example of a code cell is given below:\naccel = 9.8\ndt = 0.5\nvi = 10\nvf = vi + a * dt\nprint(vf)\nMarkdown cells are designed to contain explanatory information about what is happening inside of the code cells. They can contain text, math equations, and images. Markdown cells support markdown, html, and \\(\\mathrm{\\LaTeX}\\) (for generating pretty math equations).\nBoth markdown and code cells can be executed by either selecting Run Selected Cells in the Run menu, by clicking the Play icon at the top of the notebook, or by using the Shift-Return shortcut when your cursor is in the desired cell.\n\n\n\nOften you will want to include math equations as part of your explanation/text. Below is an example of what your math should and should not look like.\n\n\\(|\\vec{v}| = \\sqrt{v_x^2 + v_y^2}\\) (like this)\n\nv = sqrt(vx^2 + vy^2) (not like this)\n\nTo make your math equations look like the first example, you must enclose your math equation in “$$”, one pair at the beginnning of the equation and one pair at the end. Enclosing your expression in double dollar signs will put the expression on its own line. To place the expression in the middle of a sentence (inline) you’ll need to enclose the expression in single dollar signs. To generate the math symbols that often show up in equations, you’ll need to know the correct syntax. A table of commonly used math symbols is given below.\n\n\n\n\n\n\n\n\nMath symbol\nExample\n\\(\\mathrm{\\LaTeX}\\) syntax\n\n\n\n\nSubscript\n\\(v_x\\)\nv_x\n\n\nPowers\n\\(v^2\\)\nv^2\n\n\nPowers with more than one digit\n\\(v^{10}\\)\nv^{10}\n\n\nSquare root\n\\(\\sqrt{a + b}\\)\n\\sqrt{a + b}\n\n\nFractions\n\\(\\frac{a}{b}\\)\n\\frac{a}{b}\n\n\nVectors\n\\(\\vec{x}\\)\n\\vec{x}\n\n\nIntegrals\n\\(\\int x^2 dx\\)\n\\int x^2 dx\n\n\nPartial Derivatives\n\\({\\partial f \\over \\partial x}\\)\n{\\partial f \\over \\partial x}\n\n\nSummations\n\\(\\sum_{i = 1}^{10} x_i^2\\)\n\\sum_{i = 1}^{10} x_i^2\n\n\nInfinity\n\\(\\infty\\)\n\\infty\n\n\n\nYou can include Greek letters in your expressions if you know the corresponding syntax. The table below shows some of the more common Greek letters used in physics.\n\n\n\nGreek Letter\n\\(\\mathrm{\\LaTeX}\\) syntax\n\n\n\n\n\\(\\alpha\\)\n\\alpha\n\n\n\\(\\beta\\)\n\\beta\n\n\n\\(\\gamma\\)\n\\gamma\n\n\n\\(\\Delta\\)\n\\Delta\n\n\n\\(\\epsilon\\)\n\\epsilon\n\n\n\nA more comprehensive list of math symbols available can be found here\n\n\n\nTables are often useful for presenting data. You can make a table in a jupyter notebook using the following syntax\n|t (s)       | v (m/s)     |\n|------------|-------------|\n| 0          | 10          |\n| 1.2        | 22          |\n| 2.3        | 25          |\n| 3.0        | 38          |\n| 5.5        | 56          |\nwhich will generate the following table:\n\n\n\nt (s)\nv (m/s)\n\n\n\n\n0\n10\n\n\n1.2\n22\n\n\n2.3\n25\n\n\n3.0\n38\n\n\n5.5\n56\n\n\n\n\n\n\nNavigating a Jupyter notebook is fairly straightforward but there are a few handy shortcuts/hotkeys that will make navigation quicker and your workflow more efficient. When working in a Jupyter notebook, you are always operating in one of two modes: edit mode or navigate mode. In edit mode you can make modifications to the text or code in a cell and in navigate mode you can add/delete cells and modify the cell type. If you can see a blinking cursor in one of the cells you are in edit mode. Otherwise you are in navigate mode. To exit edit mode, simply press the esc key and you will enter navigate mode. To exit navigate mode, simply press the enter key and you will enter edit mode for the cell you were focused on. (You can also double click on a cell with your mouse to enter edit mode.) The shift + enter key sequence will “execute” a cell and produce the associated output. For text cells, executing just means to render the text in a nicely formatted fashion. “Executing” a code cell will actually execute the code block contained in the cell. You also enter navigate mode every time you execute a cell using the shift + enter key sequence. A summary of these shortcuts is given below:\n\nUp/down arrows - Navigate to different cells in the notebook.\nY - turns a text cell into a code cell.\nM - turns a code cell into a text cell.\nA - inserts a new cell above the current cell.\nB - inserts a new cell below the current cell.\nX - deletes the current cell.\nenter - enters edit mode.\nshift + enter - execute a cell.\nesc - enter navigate mode.\n\n\n\n\n\n\n\nJupyter notebooks in this class will be a nice mix of text cells (explanation) and code cells (examples). You will soon learn that code cells produce no output unless you explicitly tell them to using a print statement (similar to the one you used above). When you encounter a code cell, you should feel free to make modifications and additions to the cell until you fully understand how the code works.\n\n\n\nComments are a way to describe what each section of code does and makes it easier for you and others to understand the code. It may seem clear what each section of code does as you write it, but after a week, month or longer, it is unlikely to be obvious. Paul Wilson of the University of Wisconsin at Madison is quoted as saying, “Your closest collaborator is you six months ago, but you don’t reply to emails.” Comment your code now so that you are not confused later.\nThere are several ways to add comments to your code:\n\nUse # to start a comment. Everything on that line the follows will be ignored.\nFor longer comments that will span several lines, use triple double quotes to begin and end the comment (\"\"\")\n\nThe cell below illustrates these two ways to make comments:\n# Speed of light in a vacuum\nc = 3e8\n\nv = 300 # Speed of sound in air\n\n\"\"\"\nThe variables below are the initial conditions for a cannon\nlaunching a ball at a 30 degree angle with an initial speed of\n50 m/s.  The initial height of the cannon ball is 1000 m\n\"\"\"\nv = 50\ntheta = 30\nh_i = 1000\n\nTo Do:\n\nExecute the code block below and verify that no output is produced.\nAdd print statements that help you see the result of the calculation.\nAdd simple comments next to each line explaining the code.\n\n\na = 2 \nb = 3 \nc = a**b\n\n\n\n\n\nPerform the following actions using the shortcuts above:\n\nAdd a cell below this one.\nTurn the cell into a code cell (observe the distinct appearance of code cells).\nIn the code cell, calculate the Stefan-Boltzmann constant using the equation given in the first column of the table found here. Add a print statement so you can verify that you did it correctly.\nExecute the cell using shift + enter. Observe the output.\nCreate another cell just below the code cell you just created.\nTurn it into a text/markdown cell if it isn’t already.\nUsing \\(\\mathrm{\\LaTeX}\\) syntax, write the equation from the table that you used to peform the calculation.\n“Execute” the cell and observe the new output.\n\nRecreate the first three columns of your top 10 favorite physical constants found here (same table as given in exercise 1). Pick constants that have Greek letters and fun mathematical equations associated with them."
  },
  {
    "objectID": "labs/Lab1-Measurements/L1-Intro_to_Error_Analysis.html",
    "href": "labs/Lab1-Measurements/L1-Intro_to_Error_Analysis.html",
    "title": "Lab 1 Measurement and Uncertainty",
    "section": "",
    "text": "Jupyter Notebook\nName:\n\n\nAfter this lab you should be able to:\n\ntake measurements and assign uncertainties.\n\nuse Python to perform simple calculations and plotting, including error bars.\n\npropagate uncertainties for simple calculations.\n\nknow the difference between (and be able to calculate) uncertainty and fractional uncertainty.\n\n\n\n\n\n\nIn 1826, J.K.F Sturm and J.D. Collandon designed an experiment to calculate the speed of sound in seawater. The two men sat in boats separated by 16 kilometers. A bell was suspended in the lake from Sturm’s boat which could be struck by a hammer that was operated by Sturm at the surface. At the exact moment that the hammer struck the bell it also ignited some gun powder which produced an above-water flash. An underwater ear-trumpet was suspended from Collandon’s boat to receive the sound wave emitted by the bell. By measuring the time difference between the flash and the bell’s tone, the scientists were able to calculate the speed of sound to be \\(1435\\) m/s, which was remarkably close to the modern value of \\(1438\\) m/s.\n\n\n\nIf this experiment had been repeated many times the results would have been slightly different every time. This is because experiments always involve measurements, and measurements always have some variability (or uncertainty) associated with them. For example, to measure the difference in time between the bell and the flash involves the use of a watch and a human to operate that watch. A simple analog watch may be able to measure to the nearest second or maybe half second but no smaller. Typical reaction times for humans varies between \\(0.17\\) s (audio stimulus) and \\(0.25\\) s (visual stimulus). Another important measurement that would surely have some variation is the distance between the boats (reported to be \\(16\\) km). Variations in the water temperature and pressure could also change the true value of the speed of sound and therefore make the time measurements differ. Although there is only one true value for the speed of sound in fresh water (at a given temperature and pressure) multiple measurements of this quantity will never be identical. This is represented in the figure below, which is an example of what multiple measurements of the speed of sound may have looked like for Sturm and Collandon. Each vertical bar gives the number of times that the measured speed of sound occurred at that value.\n\n\n\n\n\nAs with the speed of sound experiment, every scientific experiment performed will have measurements, and those measurements will always have variability (or uncertainty) associated with them. In this lab (and several others) we will get practice taking measurements, assigning uncertainty to those measurements, and correctly reporting the uncertainty of calculations.\n\n\n\nMeasuring involves the use of a measuring device of some sort, such as a ruler, balance, microphone, voltmeter, or any other sensor. When measuring a physical property of an object, we assume that there is a unique “correct” value for this measurement. The problem is that we can never measure this “correct” value because no instrument is perfectly precise and no experiment is free from variability. We have to make do with the goal of getting as close as we can to the “correct” value and doing our best to accurately state the uncertainty.\nThere are several factors that affect your ability to perform experiments with perfect precision:\n\nLimited accuracy of measuring devices.\nCalibration of measuring devices\nChanges in physical conditions of experiment\nSimplification of experiment. (e.g. Neglecting small but not negligible forces)\n\n\n\n\nAll measuring devices fall into one of two categories: analog and digital. Analog devices usually have a set of tick marks and a scale printed on them. Meter sticks, spring scales, calipers, multimeters (comes in both analog and digital) are all examples of analog devices. Digital devices display the measurement on an electronic display. Both types of devices have uncertainty associated with them.\nConsider the example shown in figure below where we use a meter stick to measure the length of a rod. If you look close, you’ll notice that the end of the rod falls between the tick marks on the meter stick. Such will almost always be the case. If you were to look really close, you’d notice that the tick marks themselves have finite width. Therefore, even if the end of the rod landed on a tick mark, you still wouldn’t know which part of the tick mark it was. Every instrument is limited to some degree in this way.\n\n\n\nSo we can never really know the true length of the rod, or the true value of any other measurement. The best we can do is to provide a range of values that we are sure will include the true value. In this example, a range of \\((97.6-97.7)\\) would certainly include the correct value, but this range is probably too broad. On the other hand, choosing a range of \\((97.64-97.66)\\) might be too small so as to not actually include the true value. The correct length is probably \\(97.65\\) with a certainty range of \\((97.62-97.68)\\). Another way to say that is to report\n\\[l = 97.65 \\pm .03 \\mathrm{~~cm}\\]\nIn this case, \\(97.65\\) cm is the measured value and \\(.03\\) cm is the uncertainty associated with it. Uncertainties are always rounded to one significant figure and the measured value is rounded to the same decimal place as the uncertainty. It is critical in experimental science that every measurement is reported with an uncertainty value. The number alone is useless without knowing the possible range of values that it falls within.\n\n\n\nMeasurements made from digital devices will carry uncertainty too. This uncertainty arises because the device must round the measurement so that it fits on the digital readout. Uncertainty arises since you can never know what the next digit would have been. For example, suppose that you measure the mass of an object on a digital scale and it reads \\(10.55\\) kg. The actual value of the measurement could have been as low as \\(10.545\\) kg or as high as \\(10.555\\) kg. Anything in that range would have rounded to \\(10.55\\) kg. Hence, the uncertainty on this measurement is \\(\\pm 0.005\\) kg. This measurement would be reported as \\(10.55 \\pm .005\\) kg. Unless otherwise stated on the device, the uncertainty of a digital measurement is half of the value of the last decimal place shown.\n\n\n\nSometimes the biggest source of uncertainty in a measurement is not due to the instrument itself but the experimental setup. For example, if a digital timer is used to time the drop of a tennis ball, the reaction time of the person operating the timer will be bigger than the explicit uncertainty in the timer itself. (For reference, the typical reaction time for auditory stimuli is \\(0.14 - 0.16\\) s and \\(0.18 - 0.2\\) for visual stimuli.) The placement of a meter stick may vary from measurement to measurement due to human variability and this would introduce some variability in the subsequent measurements. Fluctuations in the environmental conditions (temperature, pressure, etc) can cause variability in measurements. All of these factors must be considered when assigning uncertainties to measured values.\n\n\n\nIn science, we use two terms that often can cause confusion, since in everyday language they tend to be synonymous. They are precision and accuracy. Precision is a measure of the uncertainty in a measurement. In other words, high precision means low uncertainty. Accuracy, on the other hand, means a measurement agrees well with an accepted standard. The figure below illustrates the concept of precision vs. accuracy when throwing darts at a dartboard.\nWhen all of your measurements are offset from the true value (blue dots in the figure) we call it a systematic error. An example of a systematic error would be using a measuring tape on a hot day. Because the length of the measuring tape has thermally expanded, any measurements taken will be smaller than they should be. There is no way to detect a systematic error by simply gathering data; you must uncover it based on the experimental circumstances.\n\n\n\n\n\n\nOne way to express precision is as a fractional uncertainty:\n\\[\\begin{align}\n\\mathrm{fractional ~ uncertainty} &=\n\\frac{\\mathrm{uncertainty}}{\\mathrm{measured ~value}}\n\\end{align}\\]\nFractional uncertainty are dimensionless quantities that describe how large the uncertainty is compared to the measurement. They serve as a rough indication of the quality of the measurement. Fractional uncertainties of \\(10\\%\\) or so are usually characteristic of rough measurements. (Think about measuring the length of a 10 cm object and assigning an uncertainty of 1 cm.. It’s not super great, but not terrible either). Fractional uncertainties of \\(1\\%\\) of \\(2\\%\\) are characteristic of reasonably careful measurements and are about the best we can hope for in any lab that we do. Fractional uncertainties less that \\(1\\%\\) will be difficult to achieve in an introductory lab setting.\n\n\n\nAccuracy is often expressed as a percentage error. There are slightly different ways of defining and using percentage error, depending on which scientific field you are in. In this course we will define percentage error as\n\\[\\mathrm{\\% ~error}=\\frac{(\\mathrm{measured~ value}) - (\\mathrm{theoretical~value})}{(\\mathrm{theoretical ~ value})}\\]\nThe sign of the percentage error then has meaning: a negative percent error means the measured value is less than the theoretical or accepted value, and a positive percent error means the measured value is larger then the theoretical value. High accuracy is reflected by a low percentage error.\n\n\nA comparison of the fractional uncertainty and percent error determines whether the experimental result is consistent with the hypothesis (or known quantity). If the percentage error is smaller than the fractional uncertainty, the experiment is judged to be a success since the true value falls within the uncertainty of the result. For example, suppose an experiment to determine the acceleration due to gravity results in \\(9.86 \\pm .03\\) m/s\\(^2\\). The fractional uncertainty would be\n\\[\\mathrm{fractional~ uncertainty} = \\frac{0.03}{9.86} = 0.0030 = 0.3 \\%\\]\nwhile the percentage error compared to the accepted value of \\(9.80\\) m/s\\(^2\\) would be\n\\[\\mathrm{\\% ~error} = \\frac{9.86 ~\\mathrm{m}/\\mathrm{s}^{2}-9.80~\n  \\mathrm{m}/\\mathrm{s}^{2}}{9.80~ \\mathrm{m}/\\mathrm{s}^{2}} =\n0.0061 = 0.61\\%\\] Since the percent error is larger than the fractional uncertainty we would claim that our experiment did not successfully confirm the widely accepted value of \\(g\\). In this case, the scientists should look for possible systematic errors or underestimated uncertainties in the experiment before proceeding.\nConversely, suppose the measurement of the acceleration due to gravity resulted in the experimental value of \\(10 \\pm 2\\) m/s\\(^2\\). The fractional uncertainty is \\(20\\%\\) and the percent error is \\(2.0\\%\\). We could conclude that the experiment successfully confirmed the value of \\(g\\). Your goal in any measurement should be to obtain both accuracy and precision.\n\n\n\n\nOften it will be valuable to produce a visual representation of your value with its uncertainty. As an example, imagine that you and a friend each performed an experiment to measure the acceleration due to gravity and you’d like to compare your results visually. If the results of the two experiments were\n\\[g = 9.6 \\pm 0.3 ~\\text{m/s}^2\\]\n\\[g = 10.1 \\pm 0.2 ~\\text{m/s}^2\\]\nyou could use Python to plot these two measurements with their uncertainties like this\n\nfrom matplotlib.pyplot import errorbar,show,xticks,plot\n\nx = [2,3]\ny = [9.6,10.1]\ndy = [0.3,0.2]\nerrorbar(x,y,yerr = dy,capsize = 10,marker = \"o\",linewidth = 2,capthick = 2,ls = 'none',xticks = None)\nplot([0,4],[9.8,9.8],ls = 'dashed')\nxticks([],[])\nshow()\n\n\n\n\nIn this case, the measurement whose uncertainty window contains the accepted value could claim a successful experiment, while the other measurement could not.\n\n\n\nAt this point, you may be wondering about all of those numbers in your physics textbook that are given to you without any \\(\\pm\\) value attached to them. In the absence of an explicitly-stated uncertainty, it is generally assumed that the uncertainty is \\(\\pm 5\\) on the digit that is one beyond the least significant digit. For example, if your homework problem states that a car was traveling with speed \\(25\\) m/s, it is implied that the uncertainty on that length is \\(\\pm 0.5\\) m/s. After all, if the true value were anywhere in the range \\((24.5 - 25.5)\\), we would have rounded the final answer to \\(25\\) m/s.\nThe numbers used to communicate the precision of a measurement are called significant figures. The rules for tracking and reporting of significant figures that you learn in physics and chemistry class are a quick and dirty way to keep track of these uncertainties as they are used to perform calculations. They ensure that the implied uncertainty in a calculated value is not wildly incongruent with the uncertainty in the data provided.\nHowever, using significant figures to communicate uncertainty does have it’s drawbacks. For example, let’s say that you measure the length of a rod and determine that lies in the range \\((10.5 - 10.6)\\) cm. In other words, you would report the length of the rod to be \\(10.55 \\pm .05\\) cm. You can’t communicate this uncertainty using significant figures. If you report the length to be \\(10.5\\) cm, you’re implying that the actual value is somewhere in the range of \\((10.45 - 10.55)\\) which isn’t the correct window. If you report the length to be \\(10.55\\) cm, you’re implying that the value is somewhere in the range \\((10.545 - 10.555)\\) cm, which is too narrow. We use significant figures because it’s easy and it communicates an uncertainty that is close, but not perfect.\nThe number of significant figures that a number has is an indication of its fractional uncertainty. For example, if you report your mass to be \\(m = 75\\) kg, you are implying an uncertainty of \\(\\pm .5\\) and thus a fractional uncertainty of \\({.5 \\over 75} = 0.7\\%\\). But if you report your mass to be \\(m = 75.1\\) kg you are implying an uncertainty of \\(\\pm .05\\) and thus a fractional uncertainty of \\({.05 \\over 75} = 0.07\\%\\). Roughly speaking for each significant figure that is gained the fractional uncertainty decreases by an order of magnitude. Below you will find a table with approximate correspondence between fractional uncertainties and significant figures.\n\n\n\nNumber of significant figures\nFractional Uncertainty\n\n\n\n\n1\n\\(10\\%\\) — \\(50\\%\\)\n\n\n2\n\\(1\\%\\) — \\(10\\%\\)\n\n\n3\n\\(0.1\\%\\) — \\(1\\%\\)\n\n\n\n\n\n\nOften we will need to use measured values, with their associated uncertainties, to calculate another value. For example, let’s say we measure the dimensions of a square plate to be: \\(l = 10.2 \\pm 0.3\\) cm and \\(w = 18.3 \\pm 5\\) cm. Next, we calculate the area to be:\n\\[A = l\\times w = 10.2 \\times 18.3 = 186.66 ~\\mathrm{cm}^2\\].\nWhat is the uncertainty in the area? In other words, how does the uncertainty in the measurements propagate through the calculation to the uncertainty in the area?\nOne way to answer this question is to simply ask, ““What is the maximum and minimum values of the area?”“. As you probably could have guessed, the maximum possible value for the area is\n\\[A_\\mathrm{max} = 10.5 \\times 18.8 = 197.4 ~\\mathrm{cm}^2\\]\nand the minimum possible value is\n\\[A_\\mathrm{min} = 9.9 \\times 17.8 = 176.22 ~\\mathrm{cm}^2\\] .\nTherefore, the actual value of the area must be somewhere between \\(176.22\\) cm\\(^2\\) and \\(197.4\\) cm\\(^2\\) (a range of \\(20\\) cm\\(^2\\)) and we could report the area as:\n\\[A = 187 \\pm 10 ~\\mathrm{cm}\\]\nThe high-low method is great at illustrating how measurement errors can affect results, but should never be used in a professional setting.\n\n\nUsing algebra, we can develop rules for combining uncertainty when multiplying, dividing, adding, subtracting, or raising variables to whole number powers. These rules will cover many simple situations, but eventually we will need to know how to estimate uncertainty for any function as will be covered in a future lab. For now our goal is to have a method that you can use without calculus.\n\n\n\n\n\n\n\n\nFunction\nCalculation\nUncertainty Formula    \n\n\n\n\nAddition\n\\(z = x + y\\)\n\\(\\delta z^2 = \\delta x^2 + \\delta y^2\\)\n\n\nSubtraction\n\\(z = x - y\\)\n\\(\\delta z^2 = \\delta x^2 + \\delta y^2\\)\n\n\nMultiplication\n\\(z = xy\\)\n\\(({\\delta z\\over z})^2 = ({\\delta x \\over x})^2 + ({\\delta y \\over y})^2\\)\n\n\nDivision\n\\(z = {x\\over y}\\)\n\\(({\\delta z\\over z})^2 = ({\\delta x \\over x})^2 + ({\\delta y \\over y})^2\\)\n\n\nMultiply by Constant\n\\(z = Ax\\)\n\\(\\delta z = A\\delta x\\)\n\n\nPowers\n\\(z = x^n\\)\n\\({\\delta z\\over |z|} = n{\\delta x \\over |x|}\\)\n\n\n\nUsing these rules on the example from above, we would find the following uncertainty in the area of the plate.\n$$\n\\[\\begin{align*}\n{\\delta A\\over A} &= \\sqrt{{\\delta l\\over l}^2 + {\\delta w \\over w}^2}\\\\\n&= \\delta A = A \\sqrt{({\\delta l\\over l})^2 + ({\\delta w \\over w})^2}\\\\\n&= (10.2 ~\\text{cm})(18.3 ~\\text{cm}) \\sqrt{{(0.3 ~\\text{cm})\\over (10.2 ~\\text{cm})}^2 + {(0.5 ~\\text{cm}) \\over (18.3 ~\\text{cm})}^2}\\\\\n&= 7.5 ~\\text{cm}^2\\\\\n&= 8 ~\\text{(rounded to 1 sig fig)}\n\\end{align*}\\]\n$$\nAnd the final result would be reported as \\(187 \\pm 8\\) cm\\(^2\\).\nThese uncertainty formulas can be used for more complex calculations by applying multiple formulas to different parts of the expression. For example, suppose you wanted to perform the following calculation with its associated uncertainty:\n\\[ f = b + a x^2\\]\nwhere\n\\[b = 5.1 \\pm 0.2\\]\n\\[a = 1.8 \\pm 0.1\\]\n\\[x = 3.92 \\pm 0.05\\]\nWe can first apply the rule for addition from the table:\n\\[\\delta f^2 = \\delta b^2 + \\delta(ax^2)^2\\]\nand then use the rule for powers to calculate \\(\\delta(ax^2)\\):\n\\[\\delta(ax^2) = a \\delta(x^2) = 2 |x|a \\delta x\\]\nand then insert the second expression into the first to get an expression for the uncertainty on \\(\\delta f\\):\n\\[\\delta f^2 = \\delta b^2 + (2 |x|a \\delta x)^2\\]\nHere is how we could make python perform the calculation.\n\nfrom numpy import sqrt\nb = 5.1\ndb = 0.2\na = 1.8\nda = 0.1\nx = 3.92\ndx = 0.05\nf = b + a * x**2\ndf = sqrt(db**2+ (2 * x * a * dx)**2)\nprint(f\"f = {f:5.1f} +- {df:0.1f}\")\n\nf =  32.8 +- 0.7\n\n\n\n\n\n\n\n\n\n\nMetal block and cylinder\nBalance scale.\nCaliper or ruler.\n\n\n\n\nYou will be given a metal block and a metal cylinder. Both objects are made of the same material. You will be allowed to measure the dimensions and mass of the cylinder but only the dimensions of the block. Your goal is to accurately predict the mass of the block with its associated uncertainty. If the true mass of the block falls within your uncertainty window, the experiment is a success.\nImportant: You cannot directly measure the mass of the block. The instructor will take this measurement.\n\n\n\nCarefully follow the steps below to accomplish your task\n\n\n\nUsing the caliper, measure the dimensions of the metal cylinder. Enter the values and the uncertainties into the code cell provided below.\n(5 pts) Assign uncertainties to the measurements made in step one and record those uncertainties in the code cell provided below.\nUsing the mechanical balance, measure the mass of the cylinder.\n(5 pts) Assign an uncertainty to the mass measurment and record it in the code cell given below.\nCalculate the volume of the cylinder (in units of cm\\(^3\\)) in the code cell below.\n\n(5 pts) Calculate the uncertainty in the volume of the cylinder.\n(5 pts) Calculate the density of the cylinder in units of g/cm\\(^3\\). Note: \\(\\rho = {m \\over V}\\)\n(5 pts) Calculate the uncertainty in the density of the cylinder.\n\n\n\n\n\nUsing the caliper, measure the dimensions of the metal block. Enter the values in the code cell below.\nAssign uncertainties to the measurements you made and record them in the code cell below.\nCalculate the volume of the block (in units of cm\\(^3\\)) in the code cell below.\nCalculate the uncertainty in the volume of the block.\n\n\n\n\n\nCalculate the mass of the block using \\(\\rho = {m \\over V}\\) in units of g/cm\\(^3\\).\nCalculate the uncertainty in the mass of the block.\nCalculate the fractional uncertainty in the mass of the block.\n\n\n\n\n\nHave the teacher or a TA measure the mass of the block to compare against your calculation. Assign the uncertainty in this measurement to be the same as when you measured the mass of the cylinder.\nCalculate the percentage error for your prediction.\nModify the table below to include your results for this experiment.\n\nConclusion: Does your calculation agree with the true value to within the stated uncertainty?\n\n\n\n\n\n\n\n\nQuantity\nValue\n\n\n\n\nDensity of Cylinder (with uncertainty):\n__ +- __\n\n\nPredicted mass of block (with uncertainty):\n__ +- __\n\n\nActual mass of block (with uncertainty):\n__ +- __\n\n\nPercent Error:\n—\n\n\n\n\nfrom pylab import *\n%matplotlib inline\n\n# Enter values for cylinder diameter, height, and mass. Give estimates of the uncertainties.\nd =              # diameter of cylinder in cm\nun_d =           # uncertainty of cylinder diameter in cm\nh =              # height of cylinder in cm\nun_h =           # uncertainty of cylinder height in cm\nm =              # mass of cylinder in gm\nun_m =           # uncertainty of cylinder mass in gm\n\n# Calculate and print the density and its uncertainty\nV =              # Use equations above to calculate volume of cylinder \nun_V =           # Use equation above to calculate uncertainty in volume\n\nrho =            # Use equation above to calculate density of cylinder\nun_rho =         # Use equation above to calculate uncertainty in density\n\nprint(\"The density of the cylinder is: {0:4.2f} +/- {1:4.2f} g/cm^3\".format(rho,un_rho))\n# Block dimensions\nl =           # length of the block in cm\nun_l =        # uncertainty of the length of the block in cm\nw =           # width of the block in cm\nun_w =        # uncertainty of the width of the block in cm\nh_b =         # height of the block in cm\nun_h_b =      # uncertainty of the height of the block in cm\n\n# Compute volume of block with uncertainty\nV_b =         # Calculate volume of block\nun_V_b =      # Calculate uncertainty in volume (can you figure it out from looking at the equation for the cylinder?)\n\n# Compute predicted mass of block\nm_b =         # Use previously-calculate density to calculate mass of the block\nun_m_b =      #Calculate the uncertainty in the mass\n\nprint(\"The predicted mass of the block is: {0:3.0f} +/- {1:1.0f} g\".format(m_b,un_m_b))\n\n\n\n\n\n\n\nFlexible measuring tape.\nMeter stick.\n\n\n\n\nCalculate the volume of this room with its associated uncertainty. Compare your results with classmates.\n\n\n\n\nUsing the flexible measuring tape, measure the length and width of this room. Using the meter stick, measure the height of this room. Assign uncertainties to all of these measurements. Record your values as variable in the code cell provided below.\nIn the code cell below, calculate the volume of the room.\nCalculate the uncertainty in the volume in the code cell below.\nCalculate the fractional uncertainty in the room as a percentage.\nCompare your results with the other groups in class. Enter their volumes (and yours) along with their uncertainties (and yours) on lines 5 and 6 of the code cell provided.\nLabel your axes and put a title on your plot. To learn how, go to matplotlib.org and click on the “Tutorials” tab. Either the “Usage Guide” or the “Pyplot Tutorial” will show you how to add axes labels and a title.\nIs your answer consistent with those of the other groups? If not, explain why it isn’t. >Response:\n\n# Room dimensions\nlr =           # length of the room in m\nun_lr =        # uncertainty of the length of the room in m\nwr =           # width of the room in m\nun_wr =        # uncertainty of the width of the room in m\nhr =           # height of the room in m\nun_hr =        # uncertainty of the height of the room in m\n\n# Compute volume of the room with uncertainty\nV_r =          # Compute the volume of the room\nun_V_r =       # Compute the uncertainty in the volume.\n\nprint(\"The volume of the room is: {0:4.1f} +/- {1:3.1f} m^3\".format(V_r,un_V_r))\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ngroup_num = [1,2,3,4,5,6]\nvolume = []  # Line 5\nun_volume = []  # Line 6\nax = plt.axes()\nax.errorbar(group_num,volume,yerr = un_volume,fmt = 'go', capsize = 6)\nplt.show()"
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "",
    "text": "Jupyter Notebook\nName:"
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#skills",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#skills",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "Skills",
    "text": "Skills\n\nPerform simple derivatives and use them to calculate uncertainties.\nPropagate uncertainty for moderately complex equations.\nUse Python to perform simple calculations, construct summary tables (pandas dataframes), and display plots including error bars."
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#basic-principles",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#basic-principles",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "Basic Principles",
    "text": "Basic Principles\n\nThe Slope of a Function\nMathematical functions describe how one quantity depends on one or more other quantities. For example, the velocity function\n\\[v(t) = 5 t + 2\\]\ngives the relationship between velocity and time.\n\n\n\n\n\nand this function gives the relationship between position and time\n\\[y(t) = 5t^2 -3t + 8\\]\n\n\n\n\n\nThe slope of a function (\\(m\\)) is the rate at which the function changes with its variables. The slope is straightforward to calculate for linear functions: Just pick two points, calculate \\(\\Delta y = y_2 -y_1\\) and \\(\\Delta t = t_2 - t_1\\), and divide them.\n\\[m = {\\Delta y \\over \\Delta t}\\]\nGenerally, the slope of a function isn’t constant but varies across the domain. The figure below illustrates how the tangent line to a non-linear function varies across the domain.\n\n\n\n\n\nFor those that are interested, the slope of the tangent line of a function can be found by calculating the slope of a function in the limit that the change in \\(x\\) (\\(\\Delta x\\)) becomes infinitely small.\n\n\n\n\n\nTo reiterate: The slope isn’t a single number but rather another function. (The slope for linear functions is also a function, but since it’s a constant we sometimes forget this.) This sloping function can be evaluated at any point to determine the slope of the original function. For example, the slope of the function\n\\[y(t) = 4t - 4.9 t^2\\]\nis given by the sloping function\n\\[y'(t) = {dy(t) \\over dt} = -9.8 t + 4\\]\nThese functions are plotted below to illustrate their relationship.\n\n\n\n\n\nThe notation \\({dy(t) \\over dt}\\) is used to indicate the sloping function corresponding to \\(y(t)\\). (\\(y'(t)\\) is another common way to indicate this function.)\n\n\nThe derivative\nThe sloping function can be found by applying a set of mathematical rules to the function of interest. Most of the first half of calculus are devoted to the learning and mastery of these rules. One of the more common rules is the power rule which applies to polynomial functions. Specifically, if \\(f(x) = a + bx + cx^2 + dx^2 + \\dots = \\sum_n a_n x^n\\), then\n\\[ y(x) = f'(x) = a_n (n - 1) x^{n-1}\\]\nThis rule was used to find the sloping function above. A plot of these two functions is given below.\nTo reiterate: the value of the sloping function (derivative) is equal to the slope of the original function. That’s a derivative.\nThe derivative of some other common functions is given in the table below. Your calculus class will teach you how to find the derivative of more complicated functions than those found in the table.\n\n\n\nFunction (\\(f(x)\\))\nDerivative (\\(y(x) = f'(x)\\))\n\n\n\n\n\\(f(x) = \\sin(a x)\\)\n\\(y(x) = a \\cos(a x)\\)\n\n\n\\(f(x) = \\cos(a x)\\)\n\\(y(x) = -a \\sin(a x)\\)\n\n\n\\(f(x) = \\tan(a x)\\)\n\\(y(x) = a \\sec(a x)^2\\)\n\n\n\\(f(x) = e^{a x}\\)\n\\(y(x) = ae^{a x}\\)\n\n\n\\(f(x) = \\ln(a x)\\)\n\\(y(x) = {a \\over x}\\)\n\n\n\\(f(x) = {a \\over x}\\)\n\\(y(x) = -{a \\over x^2}\\)\n\n\n\n\n\nUsing the derivative to find uncertainty.\nSo how does the derivative help when calculating uncertainty. As a simple reminder: the slope of a function is the ratio of the change in function value to the change in variable value.\n\\[ \\text{slope} = {\\partial f \\over \\partial x} = {\\text{rise} \\over \\text{run}} = {\\delta f \\over \\delta x}\\]\nIf \\(\\delta f\\) is the uncertainty in a calculated value and \\(\\delta x\\) is the uncertainty in the measured value, the equation above provides a way to calculate the uncertainty in the calculated value.\n\\[\\delta f = \\text{slope} \\times \\delta x = {\\partial f \\over \\partial x}\\]\nLet’s consider an example where we measure the frequency (\\(f\\)) of a certain light beam to be \\(f = 4.2 \\pm 0.5 \\times 10^{15}\\) Hz and want to calculate the wavelength \\(\\lambda\\) (with its associated uncertainty).\n\\[ \\lambda(f) = {3 \\times 10^8 \\over f} = 7.14 \\times 10^-8~ \\text{m}\\]\nA plot of this function is given below\n\n\n\nUsing the table above to calculate the derivative we find\n\\[ \\lambda'(f) = {\\partial \\lambda \\over \\partial f} = -{3 \\times 10^8 \\over f^2} \\]\nAnd hence, the unceratainty in the wavelength is:\n\\[\\delta \\lambda = {\\partial \\lambda \\over \\partial f} \\delta f \\]\n\\[ = -{3 \\times 10^8 \\over f^2} \\delta f\\]\n\\[= -{3 \\times 10^8 \\over (4.25 \\times 10^{15} ~\\text{Hz})^2} (0.5 \\times 10^{15} ~\\text{Hz})\\]\n\\[ = 8.5 \\times 10^9 ~ \\text{m}\\]\n\n\nPartial Derivatives\nWhen the function of interest has more than one independent variable, derivatives are performed on each variable separately, with all other variables are treated as constants. Derivatives of functions of many variables are called partial derivatives.\nFor example, consider the function:\n\\[y(x,y) = 5 x y^2 + 8 x^2 y\\]\nThe partial derivatives of this function are\n\\[{\\partial d \\over \\partial x} = 5 y^2 + 16 x^2 y\\]\n\\[{\\partial d \\over \\partial y} = 10 xy + 8 x^2\\]\nThe uncertainty in the calculated values is calculated by first forming the product \\({\\partial f \\over \\partial x_i} \\delta x_i\\) for each independent variables and inserted into the equation below\n\\[(\\delta f)^2 = ({\\partial f\\over \\partial x} \\delta x)^2 + ({\\partial f\\over \\partial y}\\delta y)^2  + \\dots\\]\nThis is the most important formula for uncertainty propagation and the one we will use going forward.\n\n\nAn Example\nImagine measuring the dimensions and mass of a block with their associated uncertainties:\n\\[l = 5.2 \\pm 0.1 ~\\text{cm}\\]\n\\[w = 8.4 \\pm 0.3 ~\\text{cm}\\]\n\\[h = 10.8 \\pm 0.4 ~\\text{cm}\\]\n\\[m = 345 \\pm 5 ~\\text{grams}\\]\nand proceeding to calculate the density of the block\n\\[\\rho = {m \\over V} = {m \\over l \\times w \\times h}\\]\n\n\n=  0.73 g/cm^3\n\n\nTo calculate the uncertainty, we must first take four derivatives with respect to \\(l\\), \\(w\\), \\(h\\), and \\(m\\):\n\\[ {\\partial \\rho \\over l} = -{m \\over l^2 w h}\\]\n\\[ {\\partial \\rho \\over h} = -{m \\over l w h^2}\\]\n\\[ {\\partial \\rho \\over w} = -{m \\over l w^2 h}\\]\n\\[ {\\partial \\rho \\over m} = {1 \\over l w h}\\]\nNow we can calculate the uncertainty as\n\\[\\delta \\rho = \\sqrt{({\\partial \\rho \\over \\partial l} \\delta l)^2 + ({\\partial \\rho \\over \\partial w} \\delta w)^2 + ({\\partial \\rho \\over \\partial h} \\delta h)^2 + ({\\partial \\rho \\over \\partial m} \\delta m)^2}\\]\n\\[ = \\sqrt{(-{m \\over l^2 w h} \\delta l)^2 + (-{m \\over l w^2 h} \\delta w)^2 + (-{m \\over l w h^2} \\delta h)^2 + ({1 \\over l w h} \\delta m)^2}\\]\n\\[ = \\sqrt{(-{(345 ~\\text{grams}) \\over (5.42 ~\\text{cm})^2 (8.4 ~\\text{cm}) (10.8 ~\\text{cm})} (0.1 ~\\text{cm}))^2 + (-{(345 ~\\text{grams}) \\over (5.42 ~\\text{cm}) (8.4 ~\\text{cm})^2 (10.8 ~\\text{cm})} (0.3 ~\\text{cm}))^2 + (-{(345 ~\\text{grams}) \\over (5.42 ~\\text{cm}) (8.4 ~\\text{cm}) (10.8 ~\\text{cm})^2} (0.4 ~\\text{cm}))^2 + ({1 \\over (5.42 ~\\text{cm}) (8.4 ~\\text{cm}) (10.8 ~\\text{cm})} (5 ~\\text{grams}))^2}\\]\nIn the code cell below we use python to calculate this uncertainty.\n\nfrom numpy import sqrt\nm = 345\ndm = 5\nl = 5.2\ndl = 0.1\nw = 8.4\ndw = 0.3\nh = 10.8\ndh = 0.4 \n\nrho = m/l/w/h\ndrdl = -m/l**2/w/h\ndrdw = -m/l/w**2/h\ndrdh = -m/l/w/h**2\ndrdm = 1/l/w/h\ndrho = sqrt((drdl * dl)**2 + (drdw * dw)**2 + (drdh * dh)**2 + (drdm * dm)**2)\nprint(f\"The density of the block is {rho:5.2f} +- {drho:4.2f} g/cm^3\")\n\nThe density of the block is  0.73 +- 0.04 g/cm^3"
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#activity-i-the-pendulum-50-pts",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#activity-i-the-pendulum-50-pts",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "Activity I: The pendulum (50 pts)",
    "text": "Activity I: The pendulum (50 pts)\n\nEquipment needed:\n\nPendulum. (We have some pre-made, or you can tie a string to a mass)\nMetal support stand for pendulum to swing from.\nPhotogate.\n\n\n\nGoal:\nBy taking measurements on a simple pendulum, calculate the acceleration due to gravity with its associated uncertainty. Compare to the known value for Rexburg.\n\n\nProcedure:\n\nAssemble five pendulums of different lengths, with the lengths ranging from \\(0.25\\) m to \\(2.0\\) m.\n\nFor each pendulum, perform the following:\n\nMeasure the distance from the support point to the center of the pendulum. This is the length of the pendulum \\(L\\). Assign an uncertainty to this measurement and record the length with its associated uncertainty in the code cell provided below.\nRelease the pendulum from a small initial angle (no bigger than \\(15^\\circ\\) from the vertical) and use the photogate to measure the period \\(T\\) of the pendulum with its associated uncertainty. (The period of a pendulum is the time it take to make one full cycle.)\nCalculate the acceleration due to gravity (\\(g\\)) using \\(g = {4 \\pi^2 L \\over T^2}\\).\nUsing the methods discussed above determine the equation for calculating the uncertainty in \\(g\\). Insert it into the math equation below \\[ \\delta g = \\]\nCalculate the uncertainty and fractional uncertainty in \\(g\\) in the code cell below.\n\nIn lines 4,5, and 6 of the cell below record all of your length, period, and g values for the five pendulums.\nIn lines 7,8, and 9 record all of the uncertainties for the five pendulums.\nWhen you execute the cell, you will see a table summarizing your results and two plots to help analyze your results. Analyze the results to answer the following questions:\n\nWhich result has the lowest uncertainty? Can you explain why?\nWhat function do you think best represents the relationship between \\(L\\) and \\(T\\)?(We will study curve-fitting in a later lab.)\nThe accepted value of \\(g\\) for Rexburg is \\(g = 9.80056\\) m/s\\(^2\\). Do your calculations agree with this value to within your calculated uncertainties? > Response:\n\n\n# Pendulum Parameters\nT =           # period of the pendulum\nun_T =        # uncertainty of the period of the pendulum\nL =           # length of the pendulum\nun_L =        # uncertainty of the length of the pendulum\n\n# Compute volume of the room with uncertainty\ng =          # Compute a value for g\nun_g =       # Compute the uncertainty in g.\nfrac_g =     # Fractional uncertainty in g\n\nprint(\"The acceleration due to gravity is: {0:4.1f} +/- {1:3.1f} m/s^2. That's a fractional uncertainty of {2:6.2f}%.\".format(g,un_g, 100 * frac_g))\nimport matplotlib.pyplot as plt\nfrom pandas import DataFrame\nimport numpy as np\n%matplotlib inline\n\nperiods = [,,,,] # Line 4\nlengths = [,,,,]  # Line 5\ngvalues = [,,,,]  # Line 6\nun_length = [,,,,]  # Line 7\nun_period = [,,,,]  # Line 8\nun_g = [,,,,]  # Line 9\n\ndf = DataFrame(np.transpose([periods,un_period,lengths,un_length,gvalues,un_g]),columns = [\"T (s)\",\"δT (s)\",\"L (m)\",\"δL (m) \",\"g (m/s^2)\",\"δg (m/s^2)\"],index = list(range(1,6)))\ndisplay(df)\n\nfig = plt.figure()            \nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nax1.errorbar(lengths,periods,yerr = un_period,xerr = un_length,fmt = 'go', capsize = 6)\nax1.set_aspect(1)\nax1.set_xlabel(\"L (meters)\")\nax1.set_ylabel(\"T (seconds)\")\nax1.set_title(\"Period vs Length for five pendulums\")\n\nax2.errorbar(lengths,gvalues,yerr = un_g,fmt = 'ro', capsize = 6)\nax2.set_aspect(1)\nax2.set_xlabel(\"L (meters)\")\nax2.set_ylabel(\"g (m/s^2)\")\nax2.set_title(\"g vs Length for five pendulums\")\n\n\nplt.show()"
  },
  {
    "objectID": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#activity-ii-50-points",
    "href": "labs/Lab2-Propagation_of_Uncertainty_I/L2-Propagation_of_UncertaintyI.html#activity-ii-50-points",
    "title": "Lab 2: Propagation of Uncertainty I",
    "section": "Activity II (50 points)",
    "text": "Activity II (50 points)\n\nEquipment needed\n\nMeter Stick\nStopwatch (the one on your phone will do fine.)\nTennis ball.\n\n\n\nGoal\nBy measuring the fall time for an object in free fall, calculate the acceleration due to gravity here in Rexburg.\n\n\nProcedure\n\nFind a location in the building that will allow the greatest drop distance for the tennis ball. (the front foyer is a good choice.) Measure the distance from the release point to the ground with its associated uncertainty. Record your values in the code cell provided below.\nUsing a stopwatch, measure the fall time with its associated uncertainty. Record the values in the code cell provided below.\nUsing the equation below, calculate the acceleration due to gravity. \\[ g = {2 h \\over t^2}\\]\nUsing the methods discussed above determine the equation for calculating the uncertainty in \\(g\\). Insert it into the math equation below \\[ \\delta g = \\]\nUsing the equation from step 4, calculate the uncertainty in \\(g\\) in the code cell below.\nRepeat steps 1 - 5 ten more times to obtain ten values of \\(g\\) and \\(\\delta g\\).\nPut all of your data in the code cell provided below (the second code cell) and execute the cell to reveal a summary table and plots that summarize your results.\n\nUsing your results, answer the following questions:\n\nAre your ten g values consistent with one another to within their stated uncertainties. Explain.\nWhat function do you think describes the relationship between the fall distance and the fall time. (We will study curve-fitting in a later lab.)\nWhich of your g values agree with the accepted value of g for Rexburg given in the first exercise.\n\n\nResponse:\n\nTake a minute to inspect all of the code that I have given to you today. Ask questions about code that you don’t understand. As some point, you’ll have to recreate code like this on your own.\n\nt =            # Time in air in sec\nun_t =         # Uncertainty of time measurement in sec\nh =            # Height in meters\nun_h =         # Uncertainty of height in meters\ng =            # Calculate g using equation above\nun_g =         # Calculate uncertainty in g\nfrac_g =       # Fractional uncertainty in g\n\nprint(\"g : {0:4.2f} +/- {1:4.2f} m/s^2.  That's a fractional uncertainty of {2:6.2f}%.\".format(g,un_g,frac_g))\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pandas import DataFrame\n%matplotlib inline\n\ntrial = [1,2,3,4,5,6,7,8,9,10]\nfallDistances = [,,,,,,,,,]\nun_distance = [,,,,,,,,,]\nfallTimes = [,,,,,,,,,]\nun_times = [,,,,,,,,,]\ng = [,,,,,,,,,]  \nun_g = [,,,,,,,,,]  \n\ndf = DataFrame(np.transpose([fallDistances,un_distance,fallTimes,un_times,g,un_g]),columns = [\"Fall Distance (m)\",\"δd (m)\",\"Fall Times (s)\",\"δt (s) \",\"g (m/s^2)\",\"δg (m/s^2)\"],index = list(range(1,11)))\ndisplay(df)\n\n\nfig = plt.figure()            \nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\n\n\nax1.errorbar(trial,g,yerr = un_g,fmt = 'go', capsize = 6)\nax1.set_aspect(1)\nax1.set_xlabel(\"trial\")\nax1.set_ylabel(\"g (m/s^2)\")\nax1.set_title(\"Acceleration due to gravity for 10 experiments\")\n\n\nax2.errorbar(fallTimes,fallDistances,yerr = un_distance,xerr=un_time,fmt = 'ro', capsize = 6)\nax2.set_aspect(1)\nax2.set_xlabel(\"Fall Times (sec)\")\nax2.set_ylabel(\"Fall Distance (m)\")\nax2.set_title(\"Fall Distance vs. Fall Time.\")\n\n\n\nplt.show()"
  },
  {
    "objectID": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html",
    "href": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html",
    "title": "Lab 3: Propagation of Uncertainty Part II",
    "section": "",
    "text": "Jupyter Notebook\nName:"
  },
  {
    "objectID": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html#skills-youll-gain",
    "href": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html#skills-youll-gain",
    "title": "Lab 3: Propagation of Uncertainty Part II",
    "section": "Skills you’ll gain",
    "text": "Skills you’ll gain\n\nUse basic LaTeX syntax to write simple mathematical equations.\nUse Sympy to calculate derivatives.\nPropagate uncertainty for complex equations using the equation \\[ \\delta q =  \\sqrt{({\\partial q \\over \\partial a} \\delta a)^2 + ({\\partial q \\over \\partial b} \\delta b)^2 + \\dots}\\]"
  },
  {
    "objectID": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html#background",
    "href": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html#background",
    "title": "Lab 3: Propagation of Uncertainty Part II",
    "section": "Background",
    "text": "Background\nLast week we learned about partial derivatives and how they can be used to calculate uncertainties in calculated quantities. The most important equation for propagation of uncertainty is \\[ \\delta q =  \\sqrt{({\\partial q \\over \\partial a} \\delta a)^2 + ({\\partial q \\over \\partial b} \\delta b)^2 + \\dots}\\] It’s not hard to find a situations that result in very difficult (and very messy) partial derivatives. This week we’ll continue to use this equation to propagate uncertainty but we’ll use Python to calculate the derivatives. Python can calculate derivatives for you using a module called sympy (short for symbolic python). To use sympy to calculate derivatives, follow the the following steps.\n\nStep 1: Define the variables that are in the expression that you want to differentiate.\nStep 2: Define the expression that you want to differentiate.\nStep 3: Use sympy’s diff function to perform the differentiation.\nStep 4: Use subs to evaluate the derivative for given value of the variables.\n\nTo see how this works, let’s follow these steps to differentiate the following function. \\[z(x,y) = {x^2 \\over y}\\]. Study the code cell below to see how this is done.\n\nimport sympy as sp\nsp.init_printing(use_unicode = True)\nx,y = sp.symbols(\"x y\")  # Step 1: Define variables \n\nz = x**2/y  # Step 2: Define expression\ndisplay(z)\nzprime = sp.diff(z,x)  # Step 3: Use 'diff' to differentiate.\ndisplay(zprime)\nresult = zprime.subs({x:5,y:3})  #Evaluate the derivative at x = 5, y = 3\nprint(result)\n\n\n\n\n\n\n\n10/3"
  },
  {
    "objectID": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html#activity-i-exit-speed-50-pts",
    "href": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html#activity-i-exit-speed-50-pts",
    "title": "Lab 3: Propagation of Uncertainty Part II",
    "section": "Activity I: Exit Speed (50 pts)",
    "text": "Activity I: Exit Speed (50 pts)\n\nEquipment needed:\n\nCannon and plunger\nSpherical steel ball (projectile)\nMeter Stick\n\n\n\nGoal:\nDetermine the speed with which the projectile leaves the cannon for all three launch settings with their associated uncertainties.\n\n\nProcedure:\n\nSet your cannon on the floor or table and set the launch angle to \\(90^\\circ\\) (straight up)\nMeasure the distance from where the sphere exits the launcher to the peak of its trajectory. Record the value and the uncertainty in the code cell provided below.\nIn the cell below, record the best value of “g” from the previous lab with its associated uncertainty.\nYou may remember the following kinematic equation: \\[ v_f^2 = v_i^2 - 2 g h\\]. Do the algebra needed to solve this equation for \\(v_i\\). Complete the equation below \\[ v_i = \\]\nOn line 9 of the code cell below, enter the expression you found in step 4 for the initial velocity. To calculate a square root, use sp.sqrt()\nTo calculate the uncertainty in the initial velocity, you need to take two derivatives of the function that you found in step 4; \\({\\partial v_i \\over \\partial g}\\) and \\({\\partial v_i \\over \\partial h}\\). Complete the mathematical statements below with the expressions for these derivatives. \\[{\\partial v_i \\over \\partial g} = \\] \\[{\\partial v_i \\over \\partial h} = \\]\nNow execute the cell below and compare python’s derivatives to your hand-written ones.\nThe expression for uncertainty propagation for \\(v_i\\) is \\[ \\delta v_i =  \\sqrt{({\\partial v_i \\over \\partial g} \\delta g)^2 + ({\\partial v_i \\over \\partial h} \\delta h)^2}\\] This calculation is performed on line 17 in the code cell below. Study the code and ask questions so you can recreate this in activity II.\n\nimport sympy as sp\n# Launch Parameters\nh =           # distance from exit point to peak\nun_h =        # uncertainty of the distance\ngval =           # acceleration due to gravity (refer to last week's results)\nun_g =        # uncertainty in g (refer to last week's results)\n\ng,dh = sp.symbols(\"g Δh\")\nvi =                   # Line 9. \n\ndvdg = sp.diff(vi,g)  # Take the derivative with respect to g  #Line 11\ndvdh = sp.diff(vi,dh) # Take the derivative with respect to h (distance to peak)  #Line 12\ndisplay(dvdg)\ndisplay(dvdh)\n\ninitialV = vi.subs({g:gval,dh:h})\nΔvi = sp.sqrt((dvdg.subs({g:gval,dh:h}) * un_g)**2 + (dvdy.subs({g:gval,dh:h}) * un_h)**2) # Line 17\n\nprint(\"The initial velocity of the particle is: {0:4.1f} +/- {1:3.1f} m/s.\".format(initialV,Δvi))"
  },
  {
    "objectID": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html#activity-ii---projectile-motion-prediction-50-points",
    "href": "labs/Lab3-Propagation_of_Uncertainty_II/L3-Propagation_of_UncertaintyII.html#activity-ii---projectile-motion-prediction-50-points",
    "title": "Lab 3: Propagation of Uncertainty Part II",
    "section": "Activity II - Projectile Motion Prediction (50 points)",
    "text": "Activity II - Projectile Motion Prediction (50 points)\n\nEquipment needed\n\nLauncher Cannon\nSpherical Steel Projectile\nMeter Stick\n\n\n\nGoal\nPredict the landing location for a launched projectile with its associated uncertainty. Verify that observed results agree with your prediction to within your stated uncertainty.\n\n\nProcedure\n\nSetup\n\nSet your cannon on a table and aim it in a direction so that the projectile won’t hit anything (or anyone).\nChoose an initial launch angle and speed setting. Then adjust your cannon to match these choices. Record your launch angle with its associated uncertainty (in radians) in the code cell below.\nTransfer the initial velocity and uncerainty that you found from activity I into the code cell below.\nMeasure the distance from the ground to the projectile’s point of exit. Record this number with its associated uncertainty in the code cell below.\n\n\n\nCalculations\n\nYou may recall the following kinematic equations from your PH121 class. \\[x_f = x_i + v_i \\cos(\\theta) t\\] \\[y_f = y_i + v_i \\sin(\\theta) t -{1\\over 2} g  t^2\\] Use the second of these equations to find an expression for the projectile’s flight time in terms of \\(y_i\\), \\(v_i\\), \\(\\theta\\), and \\(g\\). Fill in the equation below with your answer. Hint: You will have to solve a quadratic equation.\\[ t = \\]\nFollowing the same pattern used on line 9 in the code cell above, enter the expression that you found in part 5 on line 18 of the code cell below. Use sp.sqrt() for square root expressions and sp.sin() for sine expressions.\n\nTo find the uncertainty in the flight time, you’ll need to evaluate four partial derivatives: \\({\\partial t \\over \\partial v_i}\\), \\({\\partial t \\over \\partial \\theta}\\), \\({\\partial t \\over \\partial g}\\), and \\({\\partial t \\over \\partial y_i}\\). We’ll let python calculate these derivatives, following the same pattern shown in activity I. Fill in lines 20 - 23 in the code cell below with the appropriate code to calculate the four relevant derivatives. (They will look similar to lines 11 and 12 from the code cell above.)\nThe expression for the uncertainty in the flight time is given by:\\[ \\delta t = \\sqrt{({\\partial t \\over \\partial v_i} \\delta v_i)^2 + ({\\partial t \\over \\partial \\theta} \\delta \\theta)^2 + ({\\partial t \\over \\partial y_i} \\delta y_i)^2 + ({\\partial t \\over \\partial g} \\delta g)^2}\\] Fill in line 29 in the code cell below with the appropriate code to calculate this expression. (It will be similar to line 17 from the code cell above)\nNow that you have the flight time with its uncertainty, you can use the first kinematic equation from above to calculate the projectile’s landing location. Fill in the equation below with an expression for the landing location \\(x_f\\) in terms of \\(v_i\\), \\(\\theta\\), and \\(t\\). \\[x_f = \\]\nTo find the uncertainty in the landing location, you’ll need to evaluate three partial derivatives: \\({\\partial x_f \\over \\partial v_i}\\), \\({\\partial x_f \\over \\partial \\theta}\\), and \\({\\partial x_f \\over \\partial t}\\). We’ll let python calculate these derivatives, following the same pattern from activity I. Fill in lines 35 - 37 in the code cell below with the appropriate code to calculate the three relevant derivatives.(They will look similar to lines 11 and 12 from the code cell above.)\nThe expression for the uncertainty in the landing location:\\[ \\delta x_f = \\sqrt{({\\partial x_f \\over \\partial v_i} \\delta v_i)^2 + ({\\partial x_f \\over \\partial \\theta} \\delta \\theta)^2 + ({\\partial x_f \\over \\partial t} \\delta t)^2}\\] Fill in line 43 in the code cell below with the appropriate code to calculate this expression. (It will be similar to line 17 from the code cell above)\nEvaluate the code cell below and observe the results. By experimenting with the uncertainties in measured values, can you determine which variable has the greatest affect on the uncertainty in the projectile’s landing location?\n\n\n\nExperiment and Analysis\n\nPut a piece of carbon paper on the floor at your predicted landing location. Draw a circle on the carbon paper to reflect the uncertainty in your prediction. Then launch the projectile and observe where it lands. Measure the distance to the landing location with its associated uncertainty and record it in the second code cell below. Put your names on the carbon paper and hand it in to B. Nelson.\nUsing a stop watch, measure the time of flight with it’s associated uncertainty. (Don’t forget to consider your reaction time when assigning the uncertainty.) Record these values in the code cell below.\nEvaluate the second code cell below and, after observing the results, answer the following questions about your experiment in the area marked “Response” below:\n\nDo your predictions and measurements agree to within your stated uncertainty?\nIf your observations did not match your predictions to within your stated uncertainties, comment on why you think it was?\n\n\nResponse:\n\nTake a minute to inspect all of the code that I have given to you today. Ask questions about code that you don’t understand. As some point, you’ll have to recreate code like this on your own.\n\nimport sympy as sp\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\ninitialV =            # Initial speed of projectile.  \nδ_vi =          # Uncertainty in initial speed of projectile.\ntheta =            # Launch angle (Must be in Radians!!)\nδ_θ =         # Uncertainty in launch angle (Must be in radians)\nh =            # Initial height of projectile (meters).\nδ_h =         # Uncertainty in intial height (meters).\ngrav =            # Acceleration due to gravity (m/s^2). (Use value obtained in previous lab)\nδ_g =         # Uncertainty in acceleration due to gravity (m/s^2)\n\nvi,θ,yi,g,t = sp.symbols(\"vi θ yi g t\")  # Define the symbols you'll need.\n\n\n# Quadratic formula\ntime =        # Line 18\n\ndtdv =   # Derivative with respect to vi (Line 20)\ndtdθ =    # Derivative with respect to θ (Line 21)\ndtdy =   # Derivative with respect to yi (Line 22)\ndtdg =    # Derivative with respect to g (Line 23)\n\n\nvalues = {vi:initialV,θ:theta,yi:h,g:grav}\n\n#Plug in the values and calculate the flight time.\ntFlight= time.subs(values)\n\n#Plug in values to calculate uncertainty in flight time.\nδt =      # Line 29\n\nvalues[t] = tFlight  # Add flight time to dictionary of values\n\nxf =   # define range function (Line 33)\n\ndxdvi =   # Derivative with respect to vi (Line 35) \ndxdθ =     # Derivative with respect to θ (Line 36)\ndxdt =     # Derivative with respect to time (Line 37)\n\n\nlandingloc = xf.subs(values)  # Calculate landing location\n\n# Calculate uncertainty in landing location\nδloc =   # Line 43\n\nprint(\"The flight time is: {0:4.1f} +/- {1:3.1f} s.\".format(tFlight,δt))\nprint(\"The landing location is: {0:4.1f} +- {1:3.1f} m.\".format(landingloc,δloc))\nobs_xf =\nδ_obs_xf =\nobs_t =\nδ_obs_t =\n\nfig = plt.figure(figsize = (8,8)) \nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\nax1.errorbar([1,1.2],[float(tFlight),float(obs_t)],yerr=[float(δt),float(δ_obs_t)],fmt = 'go', capsize = 6)\nax1.set_aspect(1)\nax1.set_xticks([])\nax1.set_ylabel(\"Flight Time (seconds)\")\nax1.set_title(\"Predicted and measured flight times.\")\n\nax2.errorbar([1,1.2],[float(landingloc),float(obs_xf)],yerr=[float(δloc),float(δ_obs_xf)],fmt = 'ro', capsize = 6)\nax2.set_aspect(1)\nax2.set_xticks([])\nax2.set_ylabel(\"Landing Location (m)\")\nax2.set_title(\"Predicted and measured landing locations.\")\nfig.tight_layout(pad = 5.0)\n\nplt.show()"
  },
  {
    "objectID": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html",
    "href": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html",
    "title": "Lab 4 Statistical Interpretation of Uncertainty",
    "section": "",
    "text": "Jupyter Notebook\nName:"
  },
  {
    "objectID": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#skills",
    "href": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#skills",
    "title": "Lab 4 Statistical Interpretation of Uncertainty",
    "section": "Skills",
    "text": "Skills\n\nUse Python to plot statistical distributions and histograms.\nUse Python to calculate the mean, standard deviation, and standard deviation of the mean for a data set.\nExplain the difference between standard deviation and standard deviation of the mean.\nUse Python to read data from a file."
  },
  {
    "objectID": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#background-information",
    "href": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#background-information",
    "title": "Lab 4 Statistical Interpretation of Uncertainty",
    "section": "Background Information",
    "text": "Background Information\n\nStatistical Distributions\nWe’ve learned that all measurements have uncertainties associated with them. This means that when a measurement (or experiment) is repeated, the obtained value is different every time. Statisticians call this a random variable, but the numbers aren’t as random as you might think. You might think that the word random means that the value can be anything; any number at all from \\(-\\infty \\rightarrow \\infty\\) but that’s not what we typically mean. Instead, random in this context means a number that is random but subject to some probability rules.\nThe rules for deciding what random numbers are allowed are contained in a mathematical function called a probability distribution. The Gaussian (or Normal) distribution and Gamma distributions (pictured below) are two common distributions . (Students will no doubt be familiar with the term “bell curve”.)\n\n\n\n\n\nThe numbers on the horizontal axis are the possible random numbers and the height of the function indicates the probabilities. For example, for the Gaussian distribution numbers near 5 will be more likely to appear than numbers much greater or less than 5. Conversely, numbers greater than 8 and less than 2 will be quite unlikely to occur. Numbers between 6 and 8 (or 2 and 4) are less likely than numbers between 4 and 6 but more likely than numbers greater than 8 (or less than 2). You get the idea. The gamma distribution isn’t symmetric like the Gaussian. Numbers far above the peak location are more likely than numbers far below the peak location. The lower pane in the figure above is 20 random numbers selected (drawn) from this distribution.\nThe mathematical expression for the Normal distribution is given by\n\\[\nf(x) = {1\\over \\sigma \\sqrt{2 \\pi}} e^{-(x- \\mu)^2 \\over 2 \\sigma^2}\n\\]\nThe shape and location of this function are controlled by two numbers: the mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The mean controls where the peak of the distribution is located and the standard deviation controls the width of the peak. One feature of the normal distribution is that 68% of the data lies between \\(\\mu - \\sigma\\) and \\(\\mu + \\sigma\\). For this reason we often assign the mean to be the expected value and the standard deviation to be the associated uncertainty.\n\n\n\n\n\nSo what does this have to do with uncertainties in scientific experiments? When a scientist performs measurements and gathers data, they are gathering samples from a statistical distribution, usually a Gaussian. This idea is crucial to understanding how statistical distributions describe uncertainty. The challenge is figuring out which Gaussian distribution the data came from.\n\n\nHistograms\nWhen an experiment can be repeated over and over again under identical physical conditions, the data can be visualized using something called a histogram. To construct a histogram, the range of plausible measurement values is first divided into bins. Each measurement is then assigned a bin and the total number of measurements in each bin is updated. The number of measurements in all of the bins can be visualized by plotting a bar for each bin, with the height of the bar indicating how many measurements were in the bin. Below is a histogram for 10 repetitions of an experiment to determine the acceleration due to gravity.\n\n\n\n\n\nTen data points isn’t a lot but you can probably start to form a reasonable guess for the mean(expected value) and standard deviation(uncertainty) of the underlying distribution. As more data is gathered, your estimates for \\(\\mu\\) and \\(\\sigma\\) will update and your confidence in those values increases with it. (Illustrated in the figure below)\n\n\n\n\n\nAs more measurements are performed the level of confidence in the mean and standard deviation increase\n\n\n\n\nThe location of the distribution’s peak would be the expected value and the spread of the peak (at about half the max height) would be the associated uncertainty.\n\n\nMean\nThe peak of the distribution is located at the mean (\\(\\mu\\)) and can be calculated from a data set using the following expression\n\\[\n\\begin{align*}\n\\mu &= {x_1 + x_2 + \\dots\\over N}\\\\\n&= {1\\over N}\\sum_{i=1}^N \\\\\n\\end{align*}\n\\]\nThe mean should be used as the expected value when reporting results. The uncertainty in the mean will decrease as more measurements are added to the data set.\n\n\nStandard Deviation\nThe standard deviation indicates the spread in the distribution and can be calculated using the following expression\n\\[\n\\sigma = \\sqrt{ \\sum_{i=1}^N (x_i - \\mu)^2 \\over N}\n\\]\nThe standard deviation gives the uncertainty in a single measurement. If the experiment were repeated again, under identical conditions, the standard deviation would be the uncertainty associated with any single measurement. Just as with the mean, the standard deviation becomes more reliable (smaller uncertainty) as the size of the data set increases.\nWhere did this expression for the standard deviation come from? A full derivation won’t be shown here (see me if you’d like more information), but some brief motivation for why this expression is a measure of the spread in the data will be given. First notice the quantity \\(x_i - \\mu\\), which is a measure of how far away each data point is from the mean. Summing up these differences would be some indication to the amount of spread in the data. However, since some of these differences will be positive and some negative, summing them could result in zero even when the spread in the data is not zero. Instead the square of the differences is summed: \\(\\sum_{i=1}^N (x_i - \\mu)^2\\) and then divided by \\(N\\) to get an average.\n\\[\n{1\\over N} \\sum_{i=1}^N (x_i - \\mu)^2\n\\]\nThe final expression is the square root of this expression:\n\\[\n\\sigma = \\sqrt{{1\\over N} \\sum_{i=1}^N (x_i - \\mu)^2}\n\\]\n\n\nStandard Deviation of the Mean\nNotice that the standard deviation was not assigned to be the uncertainty in the mean. The reasoning for this is subtle. The shape of the histogram improves with each data point added and therefore the uncertainty associated with the mean should decrease also. However, the standard deviation does not decrease as \\(N\\) increases. Even though \\(N\\) is on the denominator of the expression, as \\(N\\) increases so too does the numerator. Hence, both the numerator and denominator increase together.\nThe uncertainty in the mean is given by\n\\[\n\\sigma_N = {\\sigma \\over \\sqrt{N}}\n\\]\nwhich decreases as more data points are added. This is the quantity that we should assign to be the uncertainty of the mean.\n\n\nComparing Results\nIn lab #1, the success of an experiment was decided by comparing the fractional uncertainty to the percent error. If the fractional uncertainty was bigger than the percent error then the experiment was judged to be a success. While this criteria isn’t wrong, it doesn’t tell us how good or bad the agreement is and it also doesn’t provide any boundary between acceptable and unacceptable results. We are now in a position to describe a more robust criteria for judging success.\nRecall that every time an experiment is performed the measurements gathered are random draws from a distribution. This distribution is assumed to be centered at the expected value (\\(x_e\\)). If the results of the experiment (usually the mean) are too far away from the expected mean, the probability that the measurements were random draws from the assumed distribution is so small that we lose confidence in that assumption. The figure below illustrates this idea. The red curve is the assumed distribution centered at the expected value and the blue bars indicate the measurements during the experiment. The mean of these results is indicated by the red dashed curve and the expected mean is indicated by the green dashed curve.\n\n\n\n\n\nTo determine the probability that these data points came from the assumed distribution we first calculate the quantity\n\\[ t = {|x_b - x_e|\\over \\sigma_n}\\]\nwhich measures how many standard deviations of the mean the measured result differs from the expected result. Here \\(x_b\\) is the best result from your experiment(usually the mean of your dataset), \\(x_e\\) is the expected value, and \\(\\sigma_n\\) is the standard deviation of the mean.\nFor values of \\(t <1\\) the experiment is probably a success and for \\(t \\gg 1\\) the experiment probably isn’t a success. But what about intermediate values? It would be nice to make a more probabilistic statement about the success of our experiment. Something like, “The probability that the results of our experiment were drawn from a distribution with the expected result as the mean is 90%”\nWe can use Python to answer this question using the code given below.\n\nfrom scipy.stats import ttest_1samp\nresults = [1.64,1.57,1.72,1.55,1.68,1.62,1.70,1.59]\n\nexpected_value = 1.67\nP = ttest_1samp(results,expected_value)\n\nprint(P.pvalue)\n\n0.14392654580468714\n\n\nThe result is called a p-value and in this case it is equal to \\(0.144\\) or \\(14.4\\%\\). This means that the probability that \\(x_b\\) was a random draw from the assumed distribution(centered at \\(x_e\\)) is \\(14.4\\%\\)\nThe boundary between acceptable and unacceptable depends on the level below which we judge a discrepancy to be unreasonably probable. This really is a matter of opinion but often a community of people will agree on a certain level. Many scientists regard \\(5\\%\\) to be the appropriate boundary and if the p-value is smaller than \\(5\\%\\) the discrepancy is deemed significant. In other words, the probability of obtaining the result as a random draw from a distribution centered at the expected value is so small that it probably didn’t. In this case, the scientist ought to look for mistakes in the experimental setup.\nOn the other hand, if the p-value is above the boundary, the discrepancy is deemed insignificant and the experiment is deemed a success. Note that p-values do not confirm the hypothesis, but just fail to reject it.\nA p-value for two data sets can be calculated to see if their distributions are statistically the same. As before the relevant quantity is\n\\[ t = {|x_b - x_e|\\over \\sigma_\\text{joint}}\\]\nbut the standard deviation is now given by\n\\[\\sigma_\\text{joint} = \\sqrt{{N_1 + N_2\\over N_1 N_2} \\cdot {(N_1 - 1)\\sigma_1^2 + (N_2 - 1)\\sigma_2^2 \\over N_1 + N_2-2}}\\]\nFortunately, python can do all of these calculations for us. For example, if two groups of students measure the time it takes for a ball to fall \\(3.00\\) m, you could use the code below to calculate a p-value.\n\nfrom scipy.stats import ttest_ind\ndataOne = [0.75,0.74,0.79,0.76,0.77,0.73,0.74,0.78,0.76,0.75]\ndataTwo = [0.81,0.80,0.79,0.76,0.77,0.80]\n\nP = ttest_ind(dataOne,dataTwo)\n\nprint(f\"The p-value for these two data sets is {P.pvalue:8.4f} = {P.pvalue*100:4.2f} %.\")\n\nThe p-value for these two data sets is   0.0067 = 0.67 %.\n\n\nSince the p-value is less than the \\(5\\%\\) boundary we conclude that the results from these two experiments differ significantly."
  },
  {
    "objectID": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#useful-plots",
    "href": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#useful-plots",
    "title": "Lab 4 Statistical Interpretation of Uncertainty",
    "section": "Useful Plots",
    "text": "Useful Plots\n\nHistograms\nTo plot a histogram in Python you should use the pyplot.hist(data) function and pass your data set into the function. There are several optional arguments to the hist function that can help customize the appearance. A few of the more important ones are given in the table below\n\n\n\n\n\n\n\n\nOptional Argument\nDescription\nExample\n\n\n\n\nbins\nSpecify how many bins should be displayed.\nbins = 20\n\n\ncolor\nSpecify what color the bars should be.\ncolor = “blue”\n\n\nedgecolor\nSpecify the color of the edge of the bars.\nedgecolor = “red”\n\n\n\nSome example code for building a histogram is given below.\n\nimport matplotlib.pyplot as plt\nimport numpy.random as rand\n\ndata = rand.normal(5,.5,1000) # Dummy data just for this example.\n\nax = plt.axes()\nax.hist(data,bins = 20,color = 'blue',edgecolor = 'black')\nplt.show()\n\n\n\n\n\n\nPlotting functions\nPlotting a function in Python can be accomplished by following these steps: 1. Build a list of x value (horizontal axis). 2. Calculate the function value for every x value. 3. Use pyplot.plot(x,y) to plot the x-y pairs. 4. Use pyplot.show() to display the plot.\nSeveral options to the pyplot.plot() function will allow you to customize the plot. Some common ones are listed below: 1. linestyle: specify what the line representing the function looks like. 2. color: Specify the color of the line representing the function. 3. linewidth: Specify the thickness of the line representing the function.\nThe functions ax.set_xlabel(), ax.set_ylabel(), and ax.set_title() can also be used to specify axes labels and a plot title. An example is given in the code cell below.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0,2 * np.pi,0.1) # Step 1\ny = np.sin(x)                  # Step 2\nax = plt.axes()\nax.plot(x,y,linewidth = 4,color = 'black',linestyle = \"--\")  # Step 3\nax.set_xlabel(\"x\")\nax.set_ylabel(\"f(x)\")\nax.set_title(\"f vs x\")\nplt.show()                     # Step 4"
  },
  {
    "objectID": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#activity-i-pendulum-period-33-points",
    "href": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#activity-i-pendulum-period-33-points",
    "title": "Lab 4 Statistical Interpretation of Uncertainty",
    "section": "Activity I Pendulum Period (33 points)",
    "text": "Activity I Pendulum Period (33 points)\n\nEqupiment needed\n\n1.5-meter-long pendulum.\nStopwatch (the one on your phone will do)\n\n\n\nGoal (Overview)\nEach student will measure the period of a 1.5-meter-long pendulum 10 times. This will result in a set of ~150 data points for the whole class. We will then calculate the acceleration due to gravity for each measurement and calculate the i) mean, ii) standard deviation, and iii) standard deviation of the mean and use these results to report an appropriate uncertainty.\n\n\nProcedure\n\nA pendulum that is 1.5 meters long will be set up at the front of the class. Each person should measure the period of the pendulum with a stopwatch 10 times. Data should be recorded to the nearest 0.01 s. For the best results try to keep the pendulum’s amplitude consistent for all of the measurements, even by restarting as necessary. The amplitude should be relatively small (less than about \\(10^\\circ\\)). The pendulum should be swinging (rather than at rest) when the time measurement begins.\nRecord your 10 measurements in the google sheets link provided below.\nOnce everyone has collected their measurements someone needs to move all of the data into a single column. Then download the file to your computer and use the np.loadtxt() function to read this data into Python. Do this on line 7 of the code cell below. (Remember: The file must be located in the same directory as this Jupyter notebook.)\nThe acceleration due to gravity can be calculated from \\[ g = {4 \\pi^2 L \\over T^2}\\] On line 9 of the code cell below calculate the acceleration due to gravity for each period measurement in the data set. To include \\(\\pi\\) in your calculation use np.pi.\nUse the equations given in the reading above to calculate the mean, standard deviation, and standard deviation of the mean. Perform these calculations on lines 10, 11, and 12 of the code cell below. Use np.sum() to perform summations and np.sqrt() to perform square root functions.\nOn lines 14,15, and 16 in the code cell below use the functions stats.mean() and stats.stdev() to calculate the mean, standard deviation, and standard deviation of the mean.\n\nAdd a formatted print statement (see examples from previous labs) to report an appropriate value for \\(g\\) with its uncertainty.\nPlot a histogram of the g values.\n\nThe normal distribution is given by \\[ N(x) = {1\\over \\sigma \\sqrt{2 \\pi}} e^{-(x- \\mu)^2\\over 2 \\sigma^2}\\]. Plot this distribution on top of the histogram. Verify that the limiting distribution matches the histogram.\n\nCalculate the p-value for this dataset using \\(g= 9.8\\) as the expected value. State whether the deviation of your experimental results are significant enough (at the \\(5\\%\\) level ) to reject the experiment. Do this on line 17 in the code cell below.\n\nPendulum Data\nimport numpy as np\nimport statistics as stats\nimport math as mt\n\n%matplotlib inline\n\nT = np.loadtxt(\"pendulum_data.txt\",float)  # Line 7\nN = len(T)     # Find the number of data points.\ng =            # Line 9\nmeanG =        # Line 10\nstdG =         # Line 11\nstdMeanG =     # Line 12\n\nμ =            # Line 14 \nσ =            # Line 15\nσ_μ =          # Line 16\np_value =      # Line 17\n\n\n\nax = plt.axes()\n# Plot the histogram and Normal distribution below.\n\nplt.plot(x,norm_data)\nplt.xlabel('g (m/s^2)')\nplt.ylabel('Probability')\nplt.show()"
  },
  {
    "objectID": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#activity-ii---radioactivity-33-points",
    "href": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#activity-ii---radioactivity-33-points",
    "title": "Lab 4 Statistical Interpretation of Uncertainty",
    "section": "Activity II - Radioactivity (33 points)",
    "text": "Activity II - Radioactivity (33 points)\n\nEquipment needed\n\nGeiger Counter\nRadioactive sample (don’t worry, they aren’t active enough to be dangerous)\nLabQuest mini box with USB cable.\nLogger Pro software. You can download a copy for your personal machine (windows or mac ) or use one of the lab computers which have Logger Pro installed already.\n\n\n\nGoal (Overview)\nWe will use the electronic radiation monitor to measure the number of decays for a radiocative sample. We will calculate the mean and standard deviation of the data and make a histogram of the data. The Poisson distribution will be plotted on top of the histogram to show it as the limiting distribution.\n\n\nProcedure\n\nUsing the Vernier Radiation Monitor, measure the decays of a radioactive sample. Below you will find the instructions for setting up the Vernier Radiation Monitor to your laptop. Use 10-second intervals and make 100 measurements.\n\nCopy the data from Logger Pro to an Excel spreadsheet and save the worksheet.(The worksheet should have only one column of data. Don’t include the time data in the Excel worksheet.)\nUse the equation above for the mean (\\(\\mu\\)) to calculate the mean of the data and the equation below to calculate the standard deviation of the data. \\[\\sigma = \\sqrt{\\mu}\\]. Perform these calculations on lines 7 and 8 in the code cell below.\nAdd a formatted print statement to report the appropriate count number with its associated uncertainty.\nOne line 11 of the code cell below, produce a histogram just as we did together in activity I. Choose bins = so that the histogram displays a sufficient amount of detail.\nThe limiting distribution for this kind of data is called a Poisson distribution (equation given below). It is only defined for interger values of the argument and it is hard to plot using standard plotting techniques. I have provided the code to plot this function in the code cell below. You may have to modify the numbers on line 14 to plot over the appropriate range. \\[P(x) = e^{-\\mu} {\\mu^x \\over x!} \\]\n\n\nInstructions for using the Vernier Radiation Monitor:\n\n\n\nConnect the Vernier Radiation Monitor to the DIG 1 port of the LabQuest Mini.\nConnect the USB cord from the LabQuest Mini to your laptop.\nWithin the LoggerPro software, do the following:\nSelect Experiment -> Data Collection and change the duration to 1000 seconds.\n\n\n\nfrom scipy.stats import poisson,norm\nfrom numpy import arange\nfrom matplotlib import pyplot as plt\n\n#data = np.loadtxt(\"radiation_data.txt\",float)\n\n#μ =   # Line 7\n#σ =   # Line 8\n\nax = plt.axes()\n              # Line 11\n\ndist = poisson(μ)\nx = arange(0,40)    # Line 14: May have to modify these numbers.\n\nax.plot(x,dist.pmf(x))\nplt.show()"
  },
  {
    "objectID": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#activity-iii---projectile-range-33-points",
    "href": "labs/Lab4-Statistical-Uncertainty/L4-Statistical-Description-Uncertainty.html#activity-iii---projectile-range-33-points",
    "title": "Lab 4 Statistical Interpretation of Uncertainty",
    "section": "Activity III - Projectile Range (33 points)",
    "text": "Activity III - Projectile Range (33 points)\n\nGoal (Overview)\nThis activity is identical in nature to Activity I. Instead of measuring the period of a pendulum, we will measure the range of a projectile. The analysis of the data will be very similar to that performed in Activity I.\n\n\nProcedure\n\nUse kinematics to predict the range of the steel ball. Perform the calculations in the code cell below.\nUsing the projectile launcher, fire a steel ball 40 times (10 launches per student) and measure the range in meters. The projectile should be placed on the table. Use an initial launch angle of \\(30^\\circ\\) and use the third spring setting to produce the largest range.\nAgain, we will pool our data together as a class to increase the size of the dataset. Therefore, it is very important that every student launches under the same conditions. Add your data to the Google sheets document linked below.\nWhen all the data is collected, have Python read the data set using np.loadtxt().\nCalculate the mean, standard deviation, and standard deviation of the mean using your preferred calculation method. (Either with stats.mean() and stats.stdev() or brute force calcuation of the equations in the book.)\nPlot a histogram of the data. Choose bins = appropriately so the histogram displays with sufficient detail.\nPlot the normal distribution on top to verify that it is the limiting distribution.\nAdd a formatted print statement to report the particle’s range with its associated uncertainty.\nCalculate the p-value for your data set using the predicted range from part 1 as your expected value. State whether the deviation of your experimental results are significant enough (at the \\(5\\%\\) level ) to reject the experiment.\n\nNo template code cell will be provided for this activity (hopefully you are feeling more and more comfortable writing simple code on your own), but you can copy/paste from previous activities.\nProjectile Data\n# Put code here"
  },
  {
    "objectID": "labs/Lab5-Experimental-Design-I/L5-Experimental-Design-I.html",
    "href": "labs/Lab5-Experimental-Design-I/L5-Experimental-Design-I.html",
    "title": "Lab 6 Experimental Design I",
    "section": "",
    "text": "Jupyter Notebook\nName:"
  },
  {
    "objectID": "labs/Lab5-Experimental-Design-I/L5-Experimental-Design-I.html#skills",
    "href": "labs/Lab5-Experimental-Design-I/L5-Experimental-Design-I.html#skills",
    "title": "Lab 6 Experimental Design I",
    "section": "Skills",
    "text": "Skills\n\nLearn how to plan and carry out a high-quality scientific experiment.\nUse Python to fit a curve to some data."
  },
  {
    "objectID": "labs/Lab5-Experimental-Design-I/L5-Experimental-Design-I.html#background-information",
    "href": "labs/Lab5-Experimental-Design-I/L5-Experimental-Design-I.html#background-information",
    "title": "Lab 6 Experimental Design I",
    "section": "Background Information",
    "text": "Background Information\n\nDesigning an Experiment\nOne of the objectives of this course is to learn how to design and carry out a successful experiment. In grade-school an experiment was any science related activity (the proverbial building of a volcano model was considered an experiment), but for a scientist an experiment is used to test a hypothesis. This test must be carried out carefully because the entire foundation of science depends on the integrity of the process. In today’s lab, a hypothesis will be given to you and you will be required to carry out the experiment to test it. The hypothesis for today’s lab involves the relationship between the period of oscillation and the mass of a mass-spring system.\nWhen conducting an experiment, always follow these steps to ensure success.\n\nIdentify the system to be examined and list all of the inputs. In our case it is a mass-spring system, which involves a mass(\\(m\\)) and a spring, whose stiffness is characterized by a spring constant (\\(k\\)). The forces acting on the mass are (i) gravity and (ii) the tension in the spring. These are the inputs. They are the quantities that could change in the design of your experiment. The first step in designing your experiment is to give a short description of the system in a lab notebook (or jupyter notebook in our case).\nIdentify the model to be tested. The word “model” means a mental picture of how something works. Physicists prefer to express a model as a mathematical equation. For example, there is a model for how force depends on acceleration. The greater the net force, the bigger the acceleration of the object. The mass also fits into the model: The larger the mass, the larger the force needed to create the same acceleration. This mental model can be expressed in an equation \\(F = ma\\) It is valuable to use both the word description of the model as well as a mathematical representation. Today, the mental model is that the period of oscillation for a mass-spring system depends directly on the square root of the mass. Think about what this means. If I increase the mass, the period should get longer. But if I double the mass, the period won’t double. This is a mental model that allows us to do predictions of behavior. In physics it is almost required to reduce this model to an algebraic equation that can be used to calculate a prediction and an uncertainty on that prediction. For today’s experiment that equation is \\[T = C\\sqrt{m}\\] where C is a factor that does not depend on mass. Today, this equation is given to you but for future experiments your group will have to come up with their own mathematical expression of the model. In your lab notebook (jupyter), record your model and the model equation.\nPlan how you will know if the experiment is successful. The success of your experiment is more likely if you anticipate (or plan) what that success will look like. One way to do this is to plan how you will communicate your results. Often these results will take the form of a graph or plot of some kind and you should think of what graph you will make at the end of the experiment to communicate whether your model works (or not). In today’s experiment, a graph of T vs. m or even T vs.\\(\\sqrt{m}\\) might be useful along with a curve fit (see section below for how to fit a curve to data in Python). Thinking about how you will communicate your results helps you decide what measurement you will make. In our case today it is hard to plot T vs. m if you don’t measure T and m, and recognizing this in advance helps you plan the experiment. Mock up your graph or figure in your lab notebook. Give axis titles and even units (but of course no data yet).\nRectify your equation. As mentioned in step 3, fitting your data to a curve is a great way to determine whether the relationship between your data is what you hypothesized. The strongest and most reliable curve fits are straight line fits where the fit equation is something like \\[y = mx + b\\] When possible, the equation from step 3 should be reduced to the equation of a straight line, or linearized. In today’s lab we can do this by taking the square root of all of the mass measurements. If the equation can’t be linearized, it should at least be rendered into a form that can be used to predict the outcome of the experiment. Record your new equation in your lab notebook.\nChoose ranges for the pertinent experiment variables. For today’s experiment the variables of interest are \\(m\\) and \\(k\\) and you should think carefully about reasonable values. It should be clear when you see the spring that putting a thousand kilograms of mass on the spring would be a bad idea. What values of \\(m\\) will give you good results in testing your theory and what values will not? Hooke’s law is not valid for all m and k (if you doubt this, think of your Christmas slinky after your brother got to it; it never looked the same again!). Using uncertainty analysis on the equation can be helpful in making this decision. Changes in mass that produce a change in T that is smaller than the uncertainty in T will not be noticeable, which means changes in the mass that are too small will be a waste of time and effort. Changes that are likely to break the equipment are also not desirable. All of these considerations should be considered before the experiment is conducted. If you fail to do this you may find find that you did not get good data, and must repeat all your work! Record your variable ranges in your lab notebook. As you perform the experiment note any deviations from this plan.\nPlan the experimental procedure. The group should talk their way through the experiment. You might find yourselves saying something like “then you take the stopwatch and measure the period..” and you realize that you did not get a stop watch. Determine whether the equipment you need is available. Get in the habit of working through the procedure in advance to see if anything has been forgotten. Record the planned procedure in your lab notebook. As you perform the experiment, note any deviations from the plan and the reason for the deviation. Deviations are fine, just make sure you record them.\nPerform the experiment and report on it in your lab notebook (jupyter). All of the previous steps were just planning. In this step you should actually do what you have planned to do. Then report your results. Specifically, in this step you should..\n\nExplain the procedure that was actually followed, recording what you really did as you do it. This will probably not be just a restatement of the plan because things will change as you go. Record the equipment used and settings, values, etc. for that equipment. Did you learn how to use any new equipment? What did you learn that you want to recall later (say, when taking the final, or when you are a professional and need to use a similar piece of equipment five years from now).\nRecord the data you used. If you have a large set of values, you can place them in a file, and then record the file name and location in your lab notebook. Make sure this is a file location that does not change (emailing the data to yourself is still not a good plan).\nGive a record of the analysis you performed. You planned this above, now record what you actually did\nGive a brief statement of your results and their associated uncertainties.\nDraw conclusions: Do your results support the theory? Why or why not? What else did you learn along the way that you want to record. (This is where we may compare the percent error to our relative uncertainty).\n\n\n\n\nPython Skills\n\nCurve Fitting\nOften in science you will gather data as a way to explore the relationship between two physical quantities and/or to validate your theories. For example, consider the time it takes a car to stop starting from the moment you slam on your brakes, locking them in place (most modern cars are designed to prevent this). The question is: How does the stopping time depend on the car’s initial speed. If you are familiar with Newtonian mechanics at all, you might hypothesize that the acceleration of the car should not depend on the initial velocity and hence the stopping time will increase linearly with the initial speed. Furthermore, the following kinematic equation\n\\[\n\\begin{align*}\nv_f &= v_i - a \\Delta t\\\\\n0 &= v_i - \\mu_k g \\Delta t\\\\\n\\Delta t &= {v_i\\over \\mu_k g}\n\\end{align*}\n\\]\nwould suggest that the slope of \\(\\Delta t\\) vs. \\(v_i\\) function is \\({1\\over a} = {1\\over \\mu g}\\). In other words, the theory of kinematics suggest that the acceleration should be independent of initial speed. To prove your idea, you should first measure the stopping time for cars with a variety of initial speeds (shown below).\n\n\n\nInitial Speed (m/s)\nSkid time (s)\n\n\n\n\n12\n3.23\n\n\n17\n3.43\n\n\n22\n4.67\n\n\n25\n5.45\n\n\n29\n6.00\n\n\n38\n8.52\n\n\n\n\n\nText(0.5, 1.0, 'Skid time vs initial speed')\n\n\n\n\n\nWe notice that the data looks linear which matches our hypothesis that the acceleration is constant.\nThe next thing to do is to find the line that passes through the data points as close as possible. When the fit function is a polynomial , we can use the polyfit function from numpy. This function takes three argument: the independent data set, the dependent data set, and the order of the polynomial\npolyfit(x,y,order)\nThe polyfit function returns a list of numbers containing the function parameters for the best fit function.\n\nfrom matplotlib import pyplot as plt\nfrom numpy import polyfit\n\nt = [3.23,3.43,4.67,5.45,6,8.52]\nvi = [12,17,22,25,29,38]\n\nparams = polyfit(vi,t,1)\nslope = params[0]\nyint = params[1]\n\ng=9.8 #Acceleration due to gravity\nmu = 1/(slope * g)\nprint(params)\nprint(mu)\n\n[0.20971747 0.21840032]\n0.48656326406696415\n\n\nIn this case, \\(0.2097\\) is the slope of the best-fit function and \\(0.2184\\) is the y-intercept of the best fit function. Remembering our theory from above, we notice that the slope of this fit function can be used to calculate the coefficient of friction between the rubber tires and the roadway.\n\\[\n\\begin{align*}\nm &= {1\\over \\mu g}\\\\\n\\mu &= {1\\over m g}\n\\end{align*}\n\\]\nIt is often useful to plot the fit function on top of the data to verify that it really matches the data.\n\nfrom matplotlib import pyplot as plt\nfrom numpy import polyfit,linspace\n\nt = [3.23,3.43,4.67,5.45,6,8.52]\nvi = [12,17,22,25,29,38]\n\nparams = polyfit(vi,t,1)\nvDense = linspace(8,40,100)\ntDense = params[0] * vDense + params[1]\n\nplt.plot(vi,t,'r.',ms = 16)\nplt.plot(vDense,tDense,'k',lw = 3)"
  },
  {
    "objectID": "labs/Lab5-Experimental-Design-I/L5-Experimental-Design-I.html#activity-mass-spring-system",
    "href": "labs/Lab5-Experimental-Design-I/L5-Experimental-Design-I.html#activity-mass-spring-system",
    "title": "Lab 6 Experimental Design I",
    "section": "Activity (mass-spring system)",
    "text": "Activity (mass-spring system)\nFollow all of the steps outlined above to perform a high-quality experiment involving a mass-spring system. Since this is your first time, an outline of the steps will be provided below.\n\nIdentify the system being studied. List all relevant variables.\n\n\nYour response:\n\n\nIdentify the hypothesis or model that you will test. Provide both a verbal description of this model and and mathematical equation. (use \\(\\LaTeX\\))\n\n\nYour response:\n\n\nHow will you know if your experiment is successful?\n\n\nYour response:\n\n\nLinearize your equation if possible.\n\n\nYour response:\n\n\nChoose reasonable ranges for the pertinent variables in your experiment.\n\n\nYour response:\n\n\nPlan the experimental procedure.\n\n\nYour response:\n\n\nCarry out the experiment and report your results. Include all data collected, plots constructed and give evidence for or against your hypothesis. Data should be placed in a table of some kind. You can either use a markdown table in a text cell or a Pandas dataframe (see activity I from lab 2 for a refresher) to display the data.\n\n\nYour response:\n\n# Perform calculations and construct plots here."
  }
]