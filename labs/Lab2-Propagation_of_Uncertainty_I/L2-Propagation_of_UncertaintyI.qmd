---
jupyter: python3
---

# Lab 2: Propagation of Uncertainty I {-}

[Jupyter Notebook](https://lancejnelson.github.io/PH150/jupyter/L2-Propagation_of_UncertaintyI.ipynb)


Name: 


## Skills
In this lab you will gain the following skills

1. Construct Python dataframes and use them to display datasets.
2. Construct arrays of plots in Python (multiple plots on one canvas).
3. Use numpy arrays to perform mathematical calculations on data sets.
4. Use $\LaTeX$ to write simple math equations.
5. Know the meaning of the derivative and partial derivative.
6. Use derivatives to propagate uncertainty for moderately complex calculations.

## Background Information
### The Slope of a Function
Mathematical functions describe how one quantity depends on one or more other quantities. For example, the velocity function

$$v(t) = 5 t + 2$$

gives the relationship between velocity and time.  

```{python}
#| eval: true
#| echo: false
#| output: true

from matplotlib import pyplot as plt
from numpy import arange
t = arange(0,10,0.1)
v = 5 * t + 2

plt.plot(t,v,lw = 3)
plt.xlabel("t (sec)")
plt.ylabel("v (meters/sec)")
plt.show()

```

and this function gives the relationship between position and time

$$y(t) = 5t^2 -3t + 8$$

```{python}
#| eval: true
#| echo: false
#| output: true

from matplotlib import pyplot as plt
from numpy import arange
t = arange(0,10,0.1)
y = 5 * t**2 - 3*t + 8

plt.plot(t,y,lw = 3)
plt.xlabel("t (sec)")
plt.ylabel("y (meters)")
plt.show()

```

The slope of a function ($m$) is the rate at which the function changes with its variables.  The slope is straightforward to calculate for linear functions: Just pick two points, calculate $\Delta y = y_2 -y_1$ and $\Delta t = t_2 - t_1$, and divide them. 
$$m = {\Delta y \over \Delta t}$$

Generally, the slope of a function isn't constant but varies across the domain.  The figure below illustrates how the tangent line to a non-linear function varies across the domain.  


```{python}
#| eval: true
#| echo: false
#| output: true

from matplotlib import pyplot as plt
from numpy import arange


def f(yi,vi,a,t):
    return yi + vi *t + 1/2 * a * t**2

def slopeTwoPoints(yi,vi,a,ta,tb,axes):
    
    m = (f(yi,vi,a,tb) - f(yi,vi,a,ta)) / (tb - ta) 
    t1 = arange(0,tb,0.01)
    y1 = [yi + vi * tb + 1/2 *a * tb**2 for t in t1]
    axes.plot(t1,y1,'b--')

    y2 = arange(0,yi + vi * tb + 1/2 *a * tb**2,0.01)
    t2 = [tb for t in y2]
    axes.plot(t2,y2,'b--')

    t3 = arange(0,ta,0.01)
    y3 = [yi + vi * ta + 1/2 *a * ta**2 for t in t3]
    axes.plot(t3,y3,'r--')

    y4 = arange(0,yi + vi * ta + 1/2 *a * ta**2,0.01)
    t4 = [ta for t in y4]
    axes.plot(t4,y4,'r--')
    tRange = arange(0,0.8,0.01)
    y = m * tRange + f(yi,vi,a,ta) - ta * m
    axes.plot(tRange,y,'g-.')
    axes.set_ylim(0,1.1)
    font = {'family':'serif','color':'darkred','weight':'normal','size':16}
    axes.text(0.45, 0.85,f"slope = {m:5.2f}",fontdict = font)
    axes.set_xlabel("t (sec)")
    axes.set_ylabel("y (meters)")

a = -9.8
vi = 4
yi = 0
t = arange(0,0.83,0.01)
y = f(yi,vi,a,t)


fig,axs = plt.subplots(2,2,figsize = (10,5))

axs[0,0].plot(t,y,lw = 3)
axs[0,1].plot(t,y,lw = 3)
axs[1,0].plot(t,y,lw = 3)
axs[1,1].plot(t,y,lw = 3)


slopeTwoPoints(yi,vi,a,0.2,0.22,axs[0,0])
slopeTwoPoints(yi,vi,a,0.3,0.31,axs[0,1])
slopeTwoPoints(yi,vi,a,0.45,0.47,axs[1,0])
slopeTwoPoints(yi,vi,a,0.6,0.62,axs[1,1])

plt.show()
```


For those that are interested, the slope of the tangent line of a function can be found by calculating the slope of a function in the limit that the change in $x$ ($\Delta x$) becomes infinitely small.

```{python}
#| eval: true
#| echo: false
#| output: true

from matplotlib import pyplot as plt
from numpy import arange


def f(yi,vi,a,t):
    return yi + vi *t + 1/2 * a * t**2

def slopeTwoPoints(yi,vi,a,ta,tb,axes):
    
    m = (f(yi,vi,a,tb) - f(yi,vi,a,ta)) / (tb - ta) 
    t1 = arange(0,tb,0.01)
    y1 = [yi + vi * tb + 1/2 *a * tb**2 for t in t1]
    axes.plot(t1,y1,'b--')

    y2 = arange(0,yi + vi * tb + 1/2 *a * tb**2,0.01)
    t2 = [tb for t in y2]
    axes.plot(t2,y2,'b--')

    t3 = arange(0,ta,0.01)
    y3 = [yi + vi * ta + 1/2 *a * ta**2 for t in t3]
    axes.plot(t3,y3,'r--')

    y4 = arange(0,yi + vi * ta + 1/2 *a * ta**2,0.01)
    t4 = [ta for t in y4]
    axes.plot(t4,y4,'r--')
    tRange = arange(0,0.5,0.01)
    y = m * tRange + f(yi,vi,a,ta) - ta * m
    axes.plot(tRange,y,'g-.')
    axes.set_ylim(0,1.1)
    font = {'family':'serif','color':'darkred','weight':'normal','size':16}
    axes.text(0.45, 0.85,f"slope = {m:5.2f}",fontdict = font)
    axes.set_xlabel("t (sec)")
    axes.set_ylabel("y (meters)")

a = -9.8
vi = 4
yi = 0
t = arange(0,0.83,0.01)
y = f(yi,vi,a,t)


fig,axs = plt.subplots(3,2,figsize = (10,5))

axs[0,0].plot(t,y,lw = 3)
axs[0,1].plot(t,y,lw = 3)
axs[1,0].plot(t,y,lw = 3)
axs[1,1].plot(t,y,lw = 3)
axs[2,0].plot(t,y,lw = 3)
axs[2,1].plot(t,y,lw = 3)

tb = 0.40
ta = 0.25

#m = 
slopeTwoPoints(yi,vi,a,0.2,0.45,axs[0,0])
slopeTwoPoints(yi,vi,a,0.2,0.4,axs[0,1])
slopeTwoPoints(yi,vi,a,0.2,0.35,axs[1,0])
slopeTwoPoints(yi,vi,a,0.2,0.3,axs[1,1])
slopeTwoPoints(yi,vi,a,0.2,0.25,axs[2,0])
slopeTwoPoints(yi,vi,a,0.2,0.22,axs[2,1])

plt.show()
```



To reiterate: The slope isn't a single number but rather another **function**. (The slope for linear functions is also a function, but since it's a constant we sometimes forget this.)  This sloping function can be evaluated at any point to determine the slope of the original function.  For example, the slope of the function

$$y(t) = 4t - 4.9 t^2$$

is given by the sloping function

$$y'(t) = {dy(t) \over dt} = -9.8 t + 4$$

These functions are plotted below to illustrate their relationship.

```{python}
#| eval: true
#| echo: false
#| output: true



from matplotlib import pyplot as plt
from numpy import arange


def f(t):
    return 4 * t - 4.9 * t**2

def slopeTwoPoints(ta,tb,axes):
    
    m = (f(tb) - f(ta)) / (tb - ta) 

#    y2 = arange(-9.8 * ta + 4,0.01)
#    t2 = [ta for x in y2]
#    axes.plot(t2,y2,'b--')

    tRange = arange(0,0.9,0.01)
    y = m * tRange + f(ta) - ta * m
    axes.plot(tRange,y,'g-.')
    axes.set_ylim(0,1.5)
    font = {'family':'serif','color':'darkred','weight':'normal','size':16}
    axes.text(0.6, 1,f"slope = {m:5.2f}",fontdict = font)
    axes.set_xlabel("t")
    axes.set_ylabel("y(t)")

def lines(t,axes):

    t1 = arange(0,t,0.01)
    y1 = [-9.8 * t + 4 for x in t1]
    axes.plot(t1,y1,'b--')

    y2 = arange(-6,-9.8 * t + 4,0.01)
    t2 = [t for x in y2]
    axes.plot(t2,y2,'b--')
    font = {'family':'serif','color':'darkred','weight':'normal','size':16}
    axes.text(0.6, 0.7,f"value = {-9.8 * t + 4:5.2f}",fontdict = font)
    axes.set_xlabel("t")
    axes.set_ylabel("y'(t)")

t = arange(0,1,0.01)
y = f(t)
y2 = 4 - 9.8 * t


fig,axs = plt.subplots(2,1,figsize = (6,4))

axs[0].plot(t,y,lw = 3)
axs[1].plot(t,y2,lw = 3)


slopeTwoPoints(0.6,0.60005,axs[0])
lines(0.6,axs[1])
plt.show()
```

The notation ${dy(t) \over dt}$ is used to indicate the sloping function corresponding to $y(t)$.  ($y'(t)$ is another common way to indicate this function.)


### The derivative
The sloping function can be found by applying a set of mathematical rules to the function of interest.  Most of the first half of calculus are devoted to the learning and mastery of these rules.  One of the more common rules is the power rule which applies to polynomial functions.  Specifically, if $f(x) = a + bx + cx^2 + dx^2 + \dots = \sum_n a_n x^n$, then 

$$ y(x) = f'(x) = a_n (n - 1) x^{n-1}$$ 

This rule was used to find the sloping function above. A plot of these two functions is given below.


To reiterate: **the value of the sloping function (derivative) is equal to the slope of the original function**.  That's a derivative.

The derivative of some other common functions is given in the table below.  Your calculus class will teach you how to find the derivative of more complicated functions than those found in the table.

| Function ($f(x)$) | Derivative ($y(x) = f'(x)$)|
|:-----------------:|:---------------------------:|
| $f(x) = \sin(a x)$| $y(x) = a \cos(a x)$|
| $f(x) = \cos(a x)$| $y(x) = -a \sin(a x)$|
| $f(x) = \tan(a x)$| $y(x) = a \sec(a x)^2$|
| $f(x) = e^{a x}$| $y(x) = ae^{a x}$|
| $f(x) = \ln(a x)$| $y(x) = {a \over x}$|
| $f(x) = {a \over x}$| $y(x) = -{a \over x^2}$|


### Using the derivative to find uncertainty.

So how does the derivative help when calculating uncertainty. As a simple reminder: the slope of a function is the ratio of the change in function value to the change in variable value.  

$$ \text{slope} = {\partial f \over \partial x} = {\text{rise} \over \text{run}} = {\delta f \over \delta x}$$

If $\delta f$ is the uncertainty in a calculated value and $\delta x$ is the uncertainty in the measured value, the equation above provides a way to calculate the uncertainty in the calculated value.

$$\delta f = \text{slope} \times \delta x = {\partial f \over \partial x}$$

 Let's consider an example where we measure the frequency ($f$) of a certain light beam to be $f = 4.2 \pm 0.5 \times 10^{15}$ Hz and want to calculate the wavelength $\lambda$ (with its associated uncertainty).


$$ \lambda(f) = {3 \times 10^8 \over f} = 7.14 \times 10^{-8}~ \text{m}$$



A plot of this function is given below

<div style="text-align: center;">
<img src="https://lancejnelson.github.io/PH150/figures/derivativeUncertainty.png" alt="drawing" width="650"/>
</div>

Using the table above to calculate the derivative we find 

$$ \lambda'(f) = {\partial \lambda \over \partial f} = -{3 \times 10^8 \over f^2} $$

And hence, the unceratainty in the wavelength is:

$$\delta \lambda = {\partial \lambda \over \partial f} \delta f $$
$$ = -{3 \times 10^8 \over f^2} \delta f$$
$$= -{3 \times 10^8 \over (4.25 \times 10^{15} ~\text{Hz})^2} (0.5 \times 10^{15} ~\text{Hz})$$
$$ = 8.5 \times 10^9 ~ \text{m}$$


### Partial Derivatives

When the function of interest has more than one independent variable, derivatives are performed on each variable separately, and all other variables are treated as constants.  Derivatives of functions of many variables are called partial derivatives.

For example, consider the function:

$$f(x,y) = 5 x y^2 + 8 x^2 y$$

The partial derivatives of this function are

$${\partial f \over \partial x} = 5 y^2 + 16 x^2 y$$
$${\partial f \over \partial y} = 10 xy + 8 x^2$$

The uncertainty in the calculated values is calculated by first forming the product ${\partial f \over \partial x_i} \delta x_i$ for each independent variables and inserted into the equation below 
$$(\delta f)^2 = ({\partial f\over \partial x} \delta x)^2 + ({\partial f\over \partial y}\delta y)^2  + \dots$$

**This is the most important formula for uncertainty propagation and the one we will use going forward.**

### An Example

Imagine measuring the dimensions and mass of a block with their associated uncertainties:

$$l = 5.2 \pm 0.1 ~\text{cm}$$
$$w = 8.4 \pm 0.3 ~\text{cm}$$
$$h = 10.8 \pm 0.4 ~\text{cm}$$
$$m = 345 \pm 5 ~\text{grams}$$

and proceeding to calculate the density of the block

$$\rho = {m \over V} = {m \over l \times w \times h}$$

```{python}
#| echo: false
#| eval: true

m = 345
l = 5.2
w = 8.4
h = 10.8 

rho = m/l/w/h
print(f"= {rho:5.2f} g/cm^3")
```

To calculate the uncertainty, we must first take four derivatives with respect to $l$, $w$, $h$, and $m$:

$$ {\partial \rho \over l} = -{m \over l^2 w h}$$

$$ {\partial \rho \over h} = -{m \over l w h^2}$$


$$ {\partial \rho \over w} = -{m \over l w^2 h}$$


$$ {\partial \rho \over m} = {1 \over l w h}$$

Now we can calculate the uncertainty as

$$\delta \rho = \sqrt{({\partial \rho \over \partial l} \delta l)^2 + ({\partial \rho \over \partial w} \delta w)^2 + ({\partial \rho \over \partial h} \delta h)^2 + ({\partial \rho \over \partial m} \delta m)^2}$$

$$ = \sqrt{(-{m \over l^2 w h} \delta l)^2 + (-{m \over l w^2 h} \delta w)^2 + (-{m \over l w h^2} \delta h)^2 + ({1 \over l w h} \delta m)^2}$$

$$ = \sqrt{(-{(345 ~\text{grams}) \over (5.42 ~\text{cm})^2 (8.4 ~\text{cm}) (10.8 ~\text{cm})} (0.1 ~\text{cm}))^2 + (-{(345 ~\text{grams}) \over (5.42 ~\text{cm}) (8.4 ~\text{cm})^2 (10.8 ~\text{cm})} (0.3 ~\text{cm}))^2 + (-{(345 ~\text{grams}) \over (5.42 ~\text{cm}) (8.4 ~\text{cm}) (10.8 ~\text{cm})^2} (0.4 ~\text{cm}))^2 + ({1 \over (5.42 ~\text{cm}) (8.4 ~\text{cm}) (10.8 ~\text{cm})} (5 ~\text{grams}))^2}$$

In the code cell below we use python to calculate this uncertainty.

```{python}
#| echo: true
#| eval: true

from numpy import sqrt
m = 345
dm = 5
l = 5.2
dl = 0.1
w = 8.4
dw = 0.3
h = 10.8
dh = 0.4 

rho = m/l/w/h
drdl = -m/l**2/w/h
drdw = -m/l/w**2/h
drdh = -m/l/w/h**2
drdm = 1/l/w/h
drho = sqrt((drdl * dl)**2 + (drdw * dw)**2 + (drdh * dh)**2 + (drdm * dm)**2)
print(f"The density of the block is {rho:5.2f} +- {drho:4.2f} g/cm^3")
```

## Python Skills

### DataFrames
A dataframe is a data structure that organizes data into a 2-dimensional table of rows and columns, similar to a spreadsheet. A dataframe can be initiated in Python using the `pandas.DataFrame()` function (case sensitive). For example, suppose that you used the accelerometer on your phone to gather the following data.

```
   time     gFx     gFy     gFz  
0  0.007 -0.0056 -0.0046  1.0120  
1  0.008  0.0007  0.0024  1.0022  
2  0.008  0.0000  0.0059  1.0039  
3  0.009  0.0054 -0.0022  1.0032  
4  0.009 -0.0015 -0.0056  1.0042  
5  0.009  0.0037 -0.0020  0.9951  
6  0.010 -0.0020 -0.0020  1.0020  
7  0.014  0.0090 -0.0024  1.0159  
8  0.015  0.0012 -0.0037  1.0100  
9  0.017 -0.0115 -0.0020  1.0012 
``` 


This data can be loaded into a dataframe like this.  


```{python}
from pandas import DataFrame
import numpy as np

time = [0.007,0.008,0.008,0.009,0.009,0.009,0.01,0.014,0.015,0.017]
gFx = [-0.0056,0.007,0,0.0054,-0.0015,0.0037,-0.002,0.009,0.0012,-0.0115]
gFy = [-0.0046,0.0024,0.0059,-0.0022,-0.0056,-0.002,-0.002,-0.0025,-0.0037,-0.002]
gFz = [1.012,1.0022,1.0039,1.0032,1.0042,0.9951,1.002,1.0159,1.01,1.0012]
elevator_data = DataFrame(np.transpose([time,gFx,gFy,gFz]),columns = ["time", "gFx","gFy", "gFz"])
display(elevator_data)
```

The `display` command can then be used to display the dataframe to screen.  The keyword argument `columns = ["time", "gFx","gFy", "gFz"]` will assign names to the columns of the dataframe. The rows also have names attached but since these names were not specified, they defaulted to the integers 0 - 9. If you want to assign different names to the rows of your dataframe, add the keyword argument `index =` when you call `DataFrame`, like this


```{python}
from pandas import DataFrame
import numpy as np

time = [0.007,0.008,0.008,0.009,0.009,0.009,0.01,0.014,0.015,0.017]
gFx = [-0.0056,0.007,0,0.0054,-0.0015,0.0037,-0.002,0.009,0.0012,-0.0115]
gFy = [-0.0046,0.0024,0.0059,-0.0022,-0.0056,-0.002,-0.002,-0.0025,-0.0037,-0.002]
gFz = [1.012,1.0022,1.0039,1.0032,1.0042,0.9951,1.002,1.0159,1.01,1.0012]
elevator_data = DataFrame(np.transpose([time,gFx,gFy,gFz]),columns = ["time", "gFx","gFy", "gFz"],index = ["A","B","C","D","E","F","G","H","J","K"])
display(elevator_data)
```
Now the names of your rows will be "A" through "K"  

### Multiple Plots
Last week we learned how to generate a single, simple plot. Often you may want to generate multiple, independent plots in the same figure.  To do this, first we must use the `figure` function which generates the canvas upon which the plots will appear. Assign this object to a variable so you can refer to it later. To create each subplot, the `fig.add_subplot(rows,columns, plot_number)` function is used.  There are three arguments to this function; the first two indicate the shape of the grid and the third indicates which position on the grid this plot will be assigned.

```
fig.add_subplot(rows,columns,plot_location)
```

  After the axes object has been created, we can call the `plot`, or `errorbar` function again, and a plot will be generated at its location.  Here is an example that will generate two plots side by side.


```{python}
from matplotlib import pyplot as plt
%matplotlib inline
from numpy import linspace,sqrt

r = linspace(0.9,4,50)

sigmaOne = 1
epsilonOne = 1
sigmaTwo = 2
epsilonTwo = 2
energyOne = 4 * sigmaOne* ((epsilonOne/r)**12 - (epsilonOne/r)**6)
energyTwo = 4 * sigmaTwo * ((epsilonTwo/r)**12 - (epsilonTwo/r)**6)

fig = plt.figure()
ax1 = fig.add_subplot(1,2,1)
ax2 = fig.add_subplot(1,2,2)

ax1.plot(r,energyOne,marker = '+',color = 'k')
ax1.set_xlim(0.5,3.0)
ax1.set_ylim(-1.5,5)
ax1.set_xlabel("Separation Distance")
ax1.set_ylabel("Energy")
ax1.set_title("Lennard-Jones Potential")

ax2.plot(r,energyTwo,marker = 'o',color = 'r')
ax2.set_xlim(0.5,4.0)
ax2.set_ylim(-2,5)
ax2.set_xlabel("Separation Distance")
ax2.set_ylabel("Energy")
ax2.set_title("Lennard-Jones Potential")
```

Pay close attention to the `add_subplot` function.  `ax1=add_subplot(1,2,1)` will generate a $1$ x $2$ grid of plots and `ax1` will correspond plot at the 1st location. Below is an example of a more advanced array of plots.  Pay close attention to the `add_subplot` functions until you understand. 

```{python}
from matplotlib import pyplot as plt
%matplotlib inline
from numpy import linspace,sqrt

r = linspace(0.9,4,50)

sigmaOne = 1
epsilonOne = 1
sigmaTwo = 2
epsilonTwo = 2
energyOne = 4 * sigmaOne* ((epsilonOne/r)**12 - (epsilonOne/r)**6)
energyTwo = 4 * sigmaTwo * ((epsilonTwo/r)**12 - (epsilonTwo/r)**6)

fig = plt.figure()
ax1 = fig.add_subplot(2,1,1)
ax2= fig.add_subplot(2,2,3)
ax3 = fig.add_subplot(2,2,4)

ax1.plot(r,energyOne,marker = '+',color = 'k')
ax1.set_xlim(0.5,3.0)
ax1.set_ylim(-1.5,5)
ax1.set_xlabel("Separation Distance")
ax1.set_ylabel("Energy")
ax1.set_title("Lennard-Jones Potential")

ax2.plot(r,energyTwo,marker = 'o',color = 'r')
ax2.set_xlim(0.5,4.0)
ax2.set_ylim(-2,5)
ax2.set_xlabel("Separation Distance")
ax2.set_ylabel("Energy")
ax2.set_title("Lennard-Jones Potential")

ax3.plot(r,energyTwo,marker = 'o',color = 'r')
ax3.set_xlim(0.5,4.0)
ax3.set_ylim(-2,5)
ax3.set_xlabel("Separation Distance")
ax3.set_ylabel("Energy")
ax3.set_title("Lennard-Jones Potential")
plt.tight_layout()
```



Also notice the `set_xlim`, `set_ylim`, `set_xlabel` etc methods that were used to customize each individual plot. There are a host of other methods available for further customization.  

[This][axes] website has a comprehensive list of them.

[axes]: https://matplotlib.org/stable/api/axes_api.html#subplots

### Numpy Arrays
Often in science you'll be working with more than one data point at a time.  For example, consider the data shown  below of a ball that is dropped from several different initial heights.  

```{python}
#| echo: False
#| eval: True

import numpy as np
import pandas as pd
y = np.array([2,2.5,3,3.5,4])
g = 9.8
t = np.sqrt(2 * y /g)
df = pd.DataFrame(np.transpose([y,t]),columns = ["Initial height (meters)", "Fall time (seconds)"])
pd.set_option("display.precision",2)
display(df)
```

Data like this should be stored in a numpy ("num-pie") array, like this:


```{python}
import numpy as np

t = np.array([0.64,0.71,0.78,0.85,0.90])
y = np.array([2.0,2.5,3.0,3.5,4.0])

```

The benefit of storing your data in arrays is that mathematical calculations are "vectorized" which means that the mathematical operation is performed across the entire data set without needing a loop.  For example, the equation $g = {2 y \over t^2}$ could be used to find the acceleration due to gravity for all of the data points like this:

```{python}
import numpy as np

t = np.array([0.64,0.71,0.78,0.85,0.90])
y = np.array([2.0,2.5,3.0,3.5,4.0])

g = 2 * y/t**2
print(g)
```


If you need to use mathematical function like square roots or trigonometric functions, you should always import them from `numpy` and not `math`.  

## $\mathrm{\LaTeX}$ 
Often you will want to include math equations as part of your explanation/text.  Below is an example of what your math should and should not look like.  

- $|\vec{v}|  = \sqrt{v_x^2 + v_y^2}$ (like this)  
- v = sqrt(vx^2 + vy^2) (not like this)

To make your math equations look like the first example, you must enclose your math equation in "$$", one pair at the beginnning of the equation and one pair at the end.  Enclosing your expression in double dollar signs will put the expression on its own line.  To place the expression in the middle of a sentence (inline) you'll need to enclose the expression in single dollar signs. To generate the math symbols that often show up in equations, you'll need to know the correct syntax.  A table of commonly used math symbols is given below.

|Math symbol | Example| $\mathrm{\LaTeX}$ syntax|
|------------|------------|-------------|
| Subscript | $v_x$  | `v_x`   |
| Powers | $v^2$  | `v^2`   |
| Powers with more than one digit | $v^{10}$  | `v^{10}`   |
| Square root| $\sqrt{a + b}$  | `\sqrt{a + b}`   |
| Fractions | $\frac{a}{b}$  | `\frac{a}{b}`   |
| Vectors | $\vec{x}$  | `\vec{x}`   |
| Integrals | $\int x^2 dx$  | `\int x^2 dx`   |
| Partial Derivatives | ${\partial f \over \partial x}$  | `{\partial f \over \partial x}`   |
| Summations | $\sum_{i = 1}^{10} x_i^2$  | `\sum_{i = 1}^{10} x_i^2`   |
| Infinity | $\infty$ | `\infty`|

You can include Greek letters in your expressions if you know the corresponding syntax.  The table below shows some of the more common Greek letters used in physics.

|Greek Letter | $\mathrm{\LaTeX}$ syntax|
|------------|-------------|
| $\alpha$  | `\alpha`   |
| $\beta$  | `\beta`   |
| $\gamma$  | `\gamma`   |
| $\Delta$  | `\Delta`   |
| $\epsilon$  | `\epsilon`   |

A more comprehensive list of math symbols available can be found [here](https://www.cmor-faculty.rice.edu/~heinken/latex/symbols.pdf)


## Activity I:  The pendulum (50 pts)
### Equipment needed:
1. Pendulum. (We have some pre-made, or you can tie a string to a mass)
2. Metal support stand for pendulum to swing from.
3. Photogate.

### Goal:  
By taking measurements on a simple pendulum, calculate the acceleration due to gravity with its associated uncertainty.  Compare to the known value for Rexburg.

### Procedure:  
1. Assemble five pendulums of different lengths, with the lengths ranging from $0.25$ m to $2.0$ m.  
2. For each pendulum, perform the following:  
   1. Measure the distance from the support point to the center of the pendulum.  This is the length of the pendulum $L$.  Assign an uncertainty to this measurement.
   2. Release the pendulum from a small initial angle (no bigger than $15^\circ$ from the vertical) and use the photogate to measure the period $T$ of the pendulum with its associated uncertainty. (The period of a pendulum is the time it take to make one full cycle.)
   3. Place all of your lengths and periods and their uncertainties into numpy arrays.
3. Calculate the acceleration due to gravity ($g$) using $g = {4 \pi^2 L \over T^2}$.
4. Using the methods discussed above determine the equation for calculating the uncertainty in $g$.  Use $\LaTeX$ syntax to complete the math equation below $$ \delta g = $$
5. Calculate the uncertainty and **fractional uncertainty** in $g$ in the code cell below.
8. Put your data in a dataframe and display the dataframe to visually verify that it has 10 rows and 6 columns. The columns should be $L$, $T$, $g$ and their uncertainties.  Give the appropriate names. 
9. Construct a multi-figure plot containing two plots.  The first plot should be period vs length and the other plot should be g vs. length. The points on both plots should have error bars attached.
10. Add axes labels and titles to both of your plots. 
11. Analyze the results to answer the following questions:  
  1. Which result has the lowest uncertainty? Can you explain why?  
  2. What function do you think best represents the relationship between $L$ and $T$?(We will study curve-fitting in a later lab.)  
  3. The accepted value of $g$ for Rexburg is $g = 9.80056$ m/s$^2$.  Do your calculations agree with this value to within your calculated uncertainties?  
  
  > Response:


```{python}
#| eval: false
#| echo: true
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
%matplotlib inline



T =    # Create array of period values.
un_T =  # Create array of uncertainties in the period measurements.
L =     # Create array of length values.
un_L =  # Create array of uncertainties in the length measurements.
g =     # Calculate g for the whole data set.
un_g =   # Calculate the uncertainty in g for the whole data set.
frac_un =  # Calculate fractional uncertainties.

df =            # Creat a dataframe of your data. Give the columns appropriate names
display(df) # Display the dataframe

# Construct a multi-figure plot below.
fig = plt.figure()            

plt.show()


```


## Activity II (50 points)

### Equipment needed
1. Meter Stick
2. Stopwatch (the one on your phone will do fine.)
3. Tennis ball.

### Goal
By measuring the fall time for an object in free fall, calculate the acceleration due to gravity here in Rexburg.

### Procedure
1. Find a location in the building that will allow the greatest drop distance for the tennis ball. (the front foyer is a good choice.)  Measure the distance from the release point to the ground with its associated uncertainty.  Record your values in the code cell provided below.
2. Using a stopwatch, measure the fall time with its associated uncertainty.  Record the values in the code cell provided below.  Note: typical reaction times are around $0.25$ s. 
3. Repeat steps 1 and 2 **ten** more times to obtain ten data points. Place your heights and drop times and their uncertainties in numpy arrays.
4. Using the equation below, calculate the acceleration due to gravity for all 10 data points. $$ g = {2 h \over t^2}$$ 
5. Using the methods discussed above determine the equation for calculating the uncertainty in $g$.  Use $\LaTeX$ syntax to complete the math equation below $$ \delta g = $$
6. Using the equation from step 5, calculate the uncertainty in $g$ in the code cell below for all 10 data points.  
7. Put your data in a dataframe and display the dataframe to visually verify that it has 10 rows and 6 columns. 
8. Construct a multi-figure plot containing two plots.  The first plot should be $g$ vs trial number and the other plot should be fall time vs. fall distance. The points on both plots should have error bars attached.
9. Add axes labels and titles to both of your plots.
10. Using your results, answer the following questions:
    1. Are your ten g values consistent with one another to within their stated uncertainties. Explain.
    2. What function do you think describes the relationship between the fall distance and the fall time. (We will study curve-fitting in a later lab.)
    3. Which of your g values agree with the accepted value of g for Rexburg given in the first exercise.
    
    > Response:


```{python}
#| eval: false
#| echo: true

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
%matplotlib inline

trial = np.array([1,2,3,4,5,6,7,8,9,10])
fallDistances =   # Construct an array of the fall distances
un_distance =     # Construct an array of the uncertainties in the fall distances.
fallTimes =       # Construct an array of the measured fall times.
un_times =        # Construct an array of the uncertainties in the fall times.
g =               # Calculate g for the entire data set.
un_g =            # Calculate the uncertainty in g
frac_g =          # Calculate the fractional uncertainty.

df = # Create a dataframe of your data. Give the columns appropriate names
display(df) # Display your dataframe


# Construct plots
fig = plt.figure()            





plt.show()
```


